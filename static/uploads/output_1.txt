 وﻛﻴﻒ ﻳعﻤﻞ وﻣﺎ ﻫي ﻣﻤﻴﺰاﺗﻪ وﻣﺎ اﻟﺨﻄﻮات ﻟﺒﻨﺎء ﻣﺸﺎرﻳﻊ رﻗﻤﻴﺔ ﻋﺒﺮﻫﺎ، ﻓي Nextjs ﻣﺎ ﻫﻮ إﻃﺎر اﻟﻌﻤﻞ
 ﺧﻄﻮة ﺑﺨﻄﻮة Nextjs ﺳﻠﺴﻠﺔ ﺗعﻠﻴﻤﻴﺔ ﻃﻮﻳﻠﺔ ﺗعﻠﻢ
min r ead 12
.اﻟﺴﻼم ﻋﻠﻴﻜﻢ ورﺣﻤﺔ ﷲ، أﺳﻌﺪ ﷲ ﺻﺒﺎﺣﻜﻢ واﻟﻤﺴﺎء أﺣﺒﺘي اﻟﻜﺮام 
 أﻧﻨي ﺳﺄﺑﺪء ﻧﺸﺮ ﺳﻠﺴﻠﺔﻟﻴﻨﻜﺪإن  وﺑﺘﻮﻳﺘﺮﻗﺒﻴﻞ ﺷﻬﺮ رﻣﻀﺎن اﻟﻜﺮﻳﻢ ﻛﺘﺒﺖ ﻋﻠى ﺣﺴﺎﺑﻲ  
 اﻟﺘي ﻋﺮﻓﺘﻬﺎ أﻛﺜﺮ ﻣﻦ ﺳﻨﺔ ﻣﻦ اﻹﺳﺘﺨﺪام Next.js ﻣﺘﺮﺟﻤﺔ إﻟى اﻟﻌﺮﺑﻴﺔ ﻹﻃﺎر ﻋﻤﻞ ﻣﻤﻴّﺰة 
 ﺧﻄﻮة ﺑﺨﻄﻮة ﺑﺎﻟﻠﻐﺔNext.js ﺳﻠﺴﻠﺔ ﺗﻌﻠﻢ إﻃﺎر
اﻟﻌﺮﺑﻴﺔ
ﻋﺒﺪاﳍﺎدي اﻷﻧﺪﻟﴘ ﻣﺪوﻧﺔ ﻋﺒﺪاﳍﺎدي اﻷﻧﺪﻟﴘ
وﺗﻄﻮﻳﺮ اﻟﻤﺸﺎرﻳﻊ اﻟﺮﻗﻤﻴﺔ اﻟﻤﺨﺘﻠﻔﺔ. ﺟﻠﻌﺘﻨي أﻧﺘﻘﻞ ﻣﻦ ﺑﻴﺌﺔ رﻳﺎﻛﺖ اﻟﻜﻼﺳﻴﻜﻴﺔ إﻟى ﺑﻴﺌﺔ 
ﻋﻤﻞ ﻣﺴﺎﻋﺪة ﻣﺨﺘﺼﺮة ﻟﻠﻮﻗﺖ واﻟﺠﻬﺪ، ﻟﺴﺖ ﻣﻀﻄﺮاً ﻣﺜﻠﻤﺎ ﻛﻨﺖ ﺑﺎﻟﺴﺎﺑﻖ إﻟى ﺗﺠﻬﻴﺰ 
( وﺗﻨﺼﻴﺐ ﻣﺌﺎت اﻟﻤﻜﺘﺒﺎت اﻷﺧﺮى ﻋﺪا ﻣﺌﺎت create-r eact-app ) ﺑﻴﺌﺔ اﻟﺘﻄﻮﻳﺮ ﻳﺪوﻳﺎً
اﻷﺳﻄﺮ ﻟﺘعﺮﻳﻒ ﺻﻔﺤﺎت ﻣﺘﺪاﺧﻠﺔ ..إﻟى آﺧﺮه ﻣﻦ اﻟﺸﻔﺮات اﻟﻤﻜﺮرة ﻓي ﻛﻞ ﻣﺸﺮوع. 
ﺑعﺪﻣﺎ رأﻳﺖ ﻓﻮاﺋﺪﻫﺎ ﻋﻠى إﻧﺘﺎﺟﻴﺘي ﻓﻜﺮت ﻓي ﻛﺘﺎﺑﺔ ﻣﻘﺎل ﻳﺘﺤﺪث ﻋﻨﻬﺎ، ﺛﻢ ﻣﺎ ﻟﺒﺜﺖ أن 
ﻣﻜﺘﺒﺔﻗﺮرت ﺗﺮﺟﻤﺔ ﻛﺘّﻴﺐ ﺣﻮﻟﻬﺎ ﻟﺘﺒﻘى ﻣﺮﺟﻌﺎً ﻟﻸﻣﺔ اﻟﻌﺮﺑﻴﺔ واﻹﺳﻼﻣﻴﺔ ﻣﺜﻠﻤﺎ ﻋﻤﻠﺖ ﻣﻊ  
.Alpine.js
. ﻛﺎن ﻗﺪ ﺷﺮﺣﻬﺎﻓﻼﻓﻴُﻮ ﻛﻮﺑﺲ  ﺻﻔﺤﺔ ﺑعﺪ ﺗﺮﺧﻴﺺ ﻣﻦ ﻛﺎﺗﺒﻬﺎ 120 ﻫﺬا اﻟﻜﺘﻴّﺐ ﻳﺤﻮي 
 اﻟﻘﺪﻳﻢ. واﻵن وﺻﻞ إﺻﺪار اﻹﻃﺎر اﻟﻌﻤﻞ إﻟى 9  إﺻﺪار Next.js  ﺑﻨﺴﺨﺔ 2019  ﻣﻄﻠﻊ ﺳﻨﺔ
+ وﻗﺪ أﻟﻐﻴﺖ اﻟﻌﺪﻳﺪ ﻣﻦ اﻟﺨﺼﺎﺋﺺ واﻷدوات. ﻓﻌﻤﺪت إﻟى ﺗﻨﻘﻴﺤﻬﺎ 10 اﻟﻨﺴﺨﺔ
"built-in " وﺗﺤﺪﻳﺜﻬﺎ ﻣﻦ ﺟﺪﻳﺪ ﻛﻤﺎ ﻋﻤﺪت إﻟى ﺗعﺮﻳﻒ وﺷﺮح ﻣﺼﻄﻠﺤﺎت إﺿﺎﻓﻴﺔ ﻣﺜﻞ
ﻣﺜﻼ ﻟﻢ ﻳﺸﺮﺣﻬﺎ اﻟﻜﺎﺗﺐ ﻟﻤﻌﺮﻓﺘي ﺑعﺪم ﺗﻮﻓّﺮﻫﺎ ﺑﺎﻟﻠﻐﺔ اﻟﻌﺮﺑﻴﺔ. 
 درس ﻣﺨﺘﻠﻒ، ﻛﻞ درس ﻳﺸﺮح وﻳﻨﺎﻗﺶ ﺧﺼﺎﺋﺺ وﻣﺰاﻳﺎ ﻣﻌﻴّﻨﺔ. 28 ﻳﺤﻮي اﻟﻔﻬﺮس ﻋﻠى 
ﻫﺪف ﻫﺬه اﻟﺴﻠﺴﻠﺔ ﻫي أﺧﺬ ﻟﻔّﺔ ﺷﺎﻣﻠﺔ واﻓﻴﺔ ﺣﻮل اﻹﻃﺎر ﺛﻢ ﺑعﺪﻫﺎ ﺗﻜﻤﻞ ﻃﺮﻳﻖ 
ﺗعﻠﻤﻚ ﻣﺒﺎﺷﺮة ﻣﻦ اﻟﺘﻮﺛﻴﻖ ﻟﻠﻤﻮﻗﻊ اﻟﺮﺳﻤي ﻟﻺﻃﺎر. وﺑﺈذن ﷲ ﺳﺘﺨﺘﺼﺮ ﻋﻠﻴﻚ رﺣﻠﺔ 
ﺗعﻠّﻤﻬﺎ ﺑﺸﻜﻞ ﻣﻔﻴﺪ ﺟﺪاً. 
اﻟﻜﺘﻴّﺐ اﻵن ﻣﻔﺘﻮح اﻟﻤﺼﺪر ﻋﻠى ﺟﻴﺘﻬﺎب 
ﺗﻢ رﻓﻊ اﻟﻜﺘﺎب ﺑﺼﻴغﺔ ﻣﺎرﻛﺪاون ﻋﻠى ﺟﻴﺘﻬﺎب ﻣﺮﺧﺺ ﺑﻤﻮﺟﺐ رﺧﺼﺔ اﻟﻤﺸﺎع اﻹﺑﺪاﻋي 
.Creative Commons
https://github.com/imAbdelhadi/ne xtjs-ar abic-handbook
 ﻣﻦ دوﻟﺔ ﺗﻮﻧﺲ اﻟﺸﻘﻴﻘﺔ ﻣﺒﺮﻣﺞﻋﺎﻃﻒ ﺑﻦ ﻋﻠي أﻧﻮّه إﻟى ﻣﻦ ﻗﺎم ﺑﻤﺴﺎﻋﺪﺗي اﻷخ اﻟﻔﺎﺿﻞ 
ﺗﻮﺛﻴﻖوﻣﻄﻮّر وﻟﺪﻳﻪ ﻓﺼﺎﺣﺔ وﺗﺪﻗﻴﻖ ﻟﻐﻮي ﺟﻴﺪّ ﺳﺒﻖ وأن ﺳﺎﻋﺪﻧي ﻋﻠى ﺗﻨﻘﻴﺢ ﺗﺮﺟﻤﺔ  
 ﻛﺎﻣﻠﺔ. ﻗﺪ ﺑﺪء اﻟﻌﻤﻞ ﻣﻌي ﻓي اﻟﺼﻔﺤﺎت اﻷوﻟى ﻟﻬﺬا اﻟﻜﺘﻴّﺐ ﺛﻢ ﻟﻤﺸﺎﻏﻞ ﻟﺪﻳﻪ Alpine.js
ﻟﻢ ﻧﻜﻤﻞ وﺳﻴعﻮد ﺑﺎذن ﷲ ﺗعﺎﻟى ﻋﻦ ﻗﺮﻳﺐ.أﺳﺎل ﷲ ﻟﻪ اﻟﺘﻮﻓﻴﻖ واﻟﺴﻼﻣﺔ واﻟﻌﺎﻓﻴﺔ ﻓي
اﻟﺪﻧﻴﺎ واﻵﺧﺮة.
 اﻟﺬي ﺑﻴﻨﺘﻪ ﻋﺒﺮﻣﺤﺮّر دوّن  ﻣﻨﻬﺎ Next.js ﻗﻤﺖ ﺑﺒﻨﺎء ﻣﺸﺎرﻳﻊ ﻋﺮﺑﻴﺔ ﻛﺜﻴﺮة ﺑﺎﺳﺘﺨﺪام 
 وﻫﻨﺎك ﻧﻤﺎذج أﺧﺮى ﻣﺜﻞ ﻣﺸﺮوع ﺗﺤﺪي ﺑﻨﺎء ﻣﺤﺮّر ﻧﺼﻮص ﻣﺎرﻛﺪاون ﻋﺮﺑﻲ ﺳﻠﺴﻠﺔ 
اﻟﻤﻌﺠﻢ وﻏﻴﺮه  ﻣﺠﺘﻤﻊ ﺣﺴﻮب اﻟﺘﺎﺑﻊ ﻟﺸﺮﻛﺔ ﺻﺨﺮ ﺳﺒﻖ وأن ﻛﺘﺒﺖ ﻋﻨﻪ ﺑـ  ﻣﻌﺠﻤي
.اﻟﻤﻌﺎﺻﺮ
. 1 .اﻟﻤﻘﺪّﻣﺔ
. 2 Next.js ﻣﺪﺧﻞ إﻟى
. 3 Next.js اﻟﻤﻴﺰات اﻟﺮﺋﻴﺴﺔ اﻟﺘي ﺗﻘﺪّﻣﻬﺎ 
. 4 .create-r eact-app  وGatsb y وNext.js اﻟﻔﺮق ﺑﻴﻦ 
. 5 Next.js ﺗﻨﺼﻴﺐ
. 6 SSR ﻣﻌﺎﻳﻨﺔ اﻟﺸﻔﺮة اﻟﻤﺼﺪرﻳﺔ ﻟﻠﺘﺤﻘﻖ ﻣﻦ ﻋﻤﻞ 
. 7 (The app bundles ) ﺣُﺰم اﻟﺘﻄﺒﻴﻖ 
. 8 إﻻم ﻳعﻨي اﻟﺮﻣﺰ اﻟﺬي ﻳﻈﻬﺮ أﺳﻔﻞ ﻳﻤﻴﻦ اﻟﺼﻔﺤﺔ؟ 
. 9 (React De vTools) ﺗﻨﺼﻴﺐ إﺿﺎﻓﺔ
. 10 Debugging ) ﺗﻘﻨﻴﺎت ﻣﺨﺘﻠﻔﺔ ﻳﻤﻜﻨﻚ اﺳﺘعﻤﺎﻟﻬﺎ ﻟﺘﻨﻘﻴﺢ اﻷﺧﻄﺎء اﻟﺒﺮﻣﺠﻴﺔ 
.(Techniques
 .11 إﺿﺎﻓﺔ ﺻﻔﺤﺎت ﺛﺎﻧﻴﺔ ﻟﻠﻤﺸﺮوع
. 12 رﺑﻂ ﺻﻔﺤﺘﻴﻦ ﻣﻊ ﺑعﺾ
. 13 (Router ) ( ﻣﻊ اﻟﻤُﻮﺟّﻪ Dynamic content ) اﻟﻤﺤﺘﻮى اﻟﺘﻔﺎﻋﻠيﻧﻤﺎذج ﻋﺮﺑﻴﺔ
 إذا واﺟﻬﺖ أي ﺧﻄﺄ ﻟﻐﻮي أو إﻣﻼﺋي ﺳﻌﻴﺪ أن ﺗﻨﺒّﻬﻨي ﻋﻠﻴﻪ ﻓي ﻗﺴﻢ اﻟﺘعﻠﻴﻘﺎت ﻣﻼﺣﻈﺔ:
ﺑﺎﻷﺳﻔﻞ ﺟﺰﻳﺖ ﺧﻴﺮاً.
اﻟﻔﻬﺮس
 .14 (Prefetching ) اﻟﺘﺤﻀﻴﺮ اﻟﻤُﺴﺒﻖ 
. 15 (Active Link ) ( ﻟﺘﺤﺪﻳﺪ اﻟﺼﻔﺤﺔ اﻟﻨَﺸِﻄﺔ Router ) اﺳﺘﺨﺪام اﻟﻤُﻮﺟّﻪ
. 16 next/router  اﺳﺘﺨﺪام
. 17 getInitialPr op اﺳﺘعﻼم اﻟﺒﻴﺎﻧﺎت ﻋﺒﺮ
. 18 CSS اﻟﺘﻨﺴﻴﻖ ﻋﺒﺮ
. 19 Head  اﺳﺘﺨﺪام وُﺳﻮم ﻣﺨﺼّﺼﺔ داﺧﻞ 
. 20 (Wrapper Component ) ﺗﺼﻤﻴﻢ وﺗغﻠﻴﻒ ﻣﻜﻮّﻧﺎت اﻟﺼﻔﺤﺔ 
. 21 API Route  اﺳﺘعﻤﺎل
. 22 ( أو ﻣﻦ ﺟﻬﺔ اﻟﺨﺎدوم Client Side ) ﺗﺸﻐﻴﻞ اﻟﺘﻄﺒﻴﻖ ﻣﻦ ﺟﻬﺔ اﻟﻤﺴﺘﺨﺪم
(Server Side )
 .23 ﻧﺸﺮ اﻹﺻﺪار اﻟﻨﻬﺎﺋي
. 24 Vercel رﻓﻊ اﻟﺘﻄﺒﻴﻖ ﻋﻠى 
. 25 (The App Bundles ) ﺗﺤﻠﻴﻞ ﺣُﺰم اﻟﺘﻄﺒﻴﻖ 
. 26 ( ﻟﻠﻮﺣﺪات Lazy loading ) اﻟﺘﺤﻤﻴﻞ اﻟﺒﻄيء
. 27 دﻟﻴﻞ ﻣﺴﺎرك اﻟﻘﺎدم 
 أو أيّ ﻣﻜﺘﺒﺎت ﺛﺎﻧﻴﺔ ﻣﺪﻋﻮﻣﺔ ﺑﻬﺎ أﻣﺮ راﺋﻊ، ﻟﻜﻦ React  اﻟﻌﻤﻞ ﺑﺎﻟﻤﻜﺘﺒﺎت اﻟﺠﺪﻳﺪة ﻣﺜﻞ
 واﻟﻤﺤﺘﻮى Rendering  ﺗﻠﻚ اﻟﻤﻜﺘﺒﺎت ﻻ ﺗﺨﻠﻮ ﻣﻦ اﻟﻤﺸﺎﻛﻞ اﻟﻤﺘعﻠّﻘﺔ ﺑعﺮض اﻟﺒﻴﺎﻧﺎت 
ﻣﻦ ﺟﻬﺔ اﻟﻤﺴﺘﺨﺪم.
أوﻻً، ﺗﺴﺘغﺮق اﻟﺼﻔﺤﺔ وﻗﺘًﺎ أﻃﻮل ﺣﺘى ﺗﺼﺒﺢ ﻣﺮﺋﻴﺔ ﻟﻠﻤﺴﺘﺨﺪم، ﻷﻧﻪ ﻗﺒﻞ ﺗﺤﻤﻴﻞ 
اﻟﻤﺤﺘﻮى، ﻳﺠﺐ ﺗﺤﻤﻴﻞ ﺟﻤﻴﻊ ﺷﻔﺮات اﻟﺠﺎﻓﺎﺳﻜﺮﻳﺒﺖ، ﺛﻢ ﻳﻘﻮم ﺗﻄﺒﻴﻘﻚ ﺑﺘﺸﻐﻴﻞ ﻣﺎ 
ﺳﻴﺘﻢ ﻋﺮﺿﻪ ﻋﻠى اﻟﺼﻔﺤﺔ. 
ﺛﺎﻧﻴًﺎ، إذا ﻛﻨﺖ ﺗﻘﻮم ﺑﺈﻧﺸﺎء ﻣﻮﻗﻊ وﻳﺐ ﻣُﺘﺎح ﻟﻠﺠﻤﻬﻮر، ﻓﺴﺘﻮاﺟﻪ ﻣﺸﻜﻠﺔ ﻓي ﺗﺤﺴﻴﻦ 
 ﻟﺼﻔﺤﺎت ﻣﻮﻗﻌﻚ. ﺻﺤﻴﺢ أن ﻣﺤﺮﻛﺎت اﻟﺒﺤﺚ ﺗﺸﻐّﻞ وﺗﻘﺮأ SEO أرﺷﻔﺔ ﻣﺤﺮﻛﺎت اﻟﺒﺤﺚ اﻟﻤﻘﺪّﻣﺔ
 ﻻﺳﺘﺨﻼص اﻟﺒﻴﺎﻧﺎت ﻣﻨﻬﺎ، وﻟﻜﻦ ﻣﻦ اﻷﻓﻀﻞ أن ﻧﺮﺳﻞ ﻟﻬﻢ اﻟﻤﺤﺘﻮى JavaScript  ﺷﻔﺮات
ﺑﺪﻻً ﻣﻦ اﻟﺴﻤﺎح ﻟﻬﻢ ﺑﺬﻟﻚ. 
(Server Rendering ) اﻟﻌﺮض ﻣﻦ ﺟﻬﺔ اﻟﺨﺎدوم اﻟﺤﻞ ﻟﻜﻞ ﻣﻦ ﻫﺎﺗﻴﻦ اﻟﻤﺸﻜﻠﺘﻴﻦ ﻫﻮ 
 .(Static Pr e-Rendering ) اﻟﻤﺴﺒﻖ اﻟﺜﺎﺑﺖ، وﻳﺴﻤى أﻳﻀًﺎ اﻟﻌﺮض  SSR أو اﺧﺘﺼﺎرا
 اﻟﺘي ﺗﻘﻮم ﺑﻜﻞ ﻫﺬا ﺑﻄﺮﻳﻘﺔ ﺳﻬﻠﺔ، وﻻ ﻳﻘﺘﺼﺮ ﻋﻠى React   ﻫﻮ واﺣﺪ ﻣﻦ أﻃﺮ Next.js
zero- ﺗﻜﻮّﻳﻦ ﻣﺴﺒﻖ ﻫﺬا ﻓﺤﺴﺐ ﺑﻞ ﻹﻧﺸﺎء ﺗﻄﺒﻴﻖ ﻋﻠﻴﻬﺎ ﻻ ﺗﺤﺘﺎج إﻟى أيّ 
.single-command toolchain   وﺑﺄﻣﺮ واﺣﺪ ﻓﻘﻂ conﬁgur ation
 ﻟﻮاﺟﻬﺔ ﺗﻄﺒﻴﻘﻚ اﻷﻣﺎﻣﻴﺔ React   ﺑﻨﻴﺔ ﻣﺸﺘﺮﻛﺔ ﺗﺴﻤﺢ ﻟﻚ ﺑﺒﻨﺎء ﺗﻄﺒﻴﻖ Next.js ﻳﻮﻓﺮ
ﺑﺴﻬﻮﻟﺔ، وﻳﺘعﺎﻣﻞ ﺑﺸﻔﺎﻓﻴﺔ ﻣﻊ اﻟﻌﺮض ﻣﻦ ﺟﺎﻧﺐ اﻟﺨﺎدوم ﻧﻴﺎﺑﺔ ﻋﻨﻚ. 
 وﺳﺄﺳﺮد ﻟﻚ اﻟﺮﺋﻴﺴﺔ ﻣﻨﻬﺎ: Next.js ﻓﻴﻤﺎ ﻳﻠي ﻗﺎﺋﻤﺔ ﻏﻴﺮ ﺷﺎﻣﻠﺔ ﻟﻜﻞ ﻣﻴﺰات
(:Hot Code Reloading ) . إﻋﺎدة اﻟﺘﺤﻤﻴﻞ اﻟﻔﻮري ﻟﻠﺘغﻴﻴﺮات 1
. ﺑﺈﻋﺎدة ﺗﺤﻤﻴﻞ اﻟﺼﻔﺤﺔ ﻋﻨﺪﻣﺎ ﻳﻜﺘﺸﻒ أي ﺗغﻴﻴﺮ ﻣﺤﻔﻮظ ﺣﺪﻳﺜﺎ Next.js ﻳﻘﻮم
(:Automatic Routing ) . اﻟﺘﻮﺟﻴﻪ اﻟﺘﻠﻘﺎﺋي 2
 ﻻ ﺗﺤﺘﺎج إﻟى أي pages   ﻳﺘﻢ ﺗﻀﻤﻴﻨﻪ ﺑﻨﻈﺎم اﻟﻤﻠﻔﺎت اﻟﻤﻮﺿﻮﻋﺔ داﺧﻞ URL أي راﺑﻂ
ﺗعﺮﻳﻒ أو ﺗﻜﻮﻳﻦ.
(:Single File Components ) . ﻣﻜﻮﻧﺎت ﻓﺮدﻳﺔ 3
 ﺗﻤﺎﻣًﺎ، واﻟﺬي ﺗﻢ إﻧﺸﺎؤه ﻣﻦ ﻧﻔﺲ Next.js  -اﻟﻤﺘﻜﺎﻣﻞ ﻣﻊ styled-jsx  ﺑﺎﺳﺘﺨﺪام
اﻟﻔﺮﻳﻖ- ﻳَﺴﻬّﻞ ﻋﻠﻴﻚ إﺿﺎﻓﺔ أﻧﻤﺎط ﻣﺤﺪدة ﻟﻜﻞ ﻣﻜﻮّن ﻋﻠى ﺣﺪة. 
(:Server Rendering   أوSSR). اﻟﻌﺮض ﻣﻦ ﺟﻬﺔ اﻟﺨﺎدوم 4( ﺗعﻨي ﻣﺠﻤﻮﻋﺔ أدوات ﺗﺴﺘﺨﺪم ﻷداء ﻣﻬﻤّﺔ ﺑﻨﺎء tool-chain ) : ﺳﻠﺴﻠﺔ اﻷدواتﻣﻌﻠﻮﻣﺔ 
وﺗﻄﻮﻳﺮ اﻟﻤﺸﺎرﻳﻊ اﻟﺒﺮﻣﺠﻴﺔ. 
Next.js اﻟﻤﲒات اﻟﺮﺋﻴﺴﺔ اﻟﱵ ﻳﻘﺪّﻣﻬﺎ
. إﻟى اﻟﻤﺴﺘﺨﺪم HTML  ﻳﻤﻜﻨﻚ ﺗﺠﻬﻴﺰ اﻟﻤﺤﺘﻮى وﻋﺮض اﻟﻤﻜﻮّﻧﺎت ﻗﺒﻞ إرﺳﺎل 
(:Ecosystem Compatibility ) ﺗﻮاﻓﻖ اﻟﻨﻈﺎم اﻟﺒﻴﺌي
.React  وNode  وJavaScript   ﺑﺸﻜﻞ ﺟﻴﺪ ﻣﻊ ﺑﺎﻗي ﻣﻜﺘﺒﺎت وأﻧﻈﻤﺔ Next.js ﻳﺘﻮاﻓﻖ
(:Automatic Code Splitting ) . اﻟﺘﻘﺴﻴﻢ اﻟﺘﻠﻘﺎﺋي ﻟﻠﺸﻔﺮة اﻟﺒﺮﻣﺠﻴﺔ 5
ﻳﺘﻢ ﺗﺤﻤﻴﻞ اﻟﺼﻔﺤﺎت اﻟﺘي ﻳﺤﺘﺎﺟﻬﺎ اﻟﺠﺎﻓﺎﺳﻜﺮﺑﺖ ﻓﻘﻂ، ﻓﻼ ﻳﻘﻮم ﺑﺘﺤﻤﻴﻞ ﻛﻞ ﺷﻔﺮات
 ﺗﻠﻘﺎﺋﻴﺎً ﻟﻌﺪة ﻣﺼﺎدر broken up   اﻟﺘﻘﺴﻴﻢ Next.js اﻟﺠﺎﻓﺎﺳﻜﺮﺑﺖ ﻓي ﻣﻠﻒ واﺣﺪ. ﻳﺘﻮﻟى
ﻣﺨﺘﻠﻔﺔ.
،resour ces imported   ذﻟﻚ ﻣﻦ ﺧﻼل ﺗﺤﻠﻴﻞ اﻟﻮﺣﺪات اﻟﻤﺴﺘﻮردة Next.js ﻳﻔﻌﻞ
 ﻓي ﺻﻔﺤﺔ واﺣﺪة ﻣﻦ ﺻﻔﺤﺎت Axios  ﻋﻠى ﺳﺒﻴﻞ اﻟﻤﺜﺎل ﻟﻮ ﻗﻤﺖ ﺑﺎﺳﺘﺪﻋﺎء ﻣﻜﺘﺒﺔ
ﺗﻄﺒﻴﻘﻚ، ﻓﻼ ﻳﺘﻢ ﺗﺤﻤﻴﻠﻬﺎ ﻓي ﻛﻞ اﻟﺼﻔﺤﺎت اﻟﺜﺎﻧﻴﺔ، ﺑﻞ ﻳﺘﻢ اﺳﺘﺪﻋﺎؤﻫﺎ ﻟﺘﻠﻚ اﻟﺼﻔﺤﺔ
ﻓﻘﻂ.
وﻫﺬا ﻳﻀﻤﻦ أﻧﻪ ﻳﺘﻢ ﺗﺤﻤﻴﻞ اﻟﺼﻔﺤﺔ اﻷوﻟى ﺑﺄﺳﺮع ﻣﺎ ﻳﻤﻜﻦ، وأن ﻋﻤﻠﻴﺎت ﺗﺤﻤﻴﻞ
اﻟﺼﻔﺤﺔ اﻟﻘﺎدﻣﺔ ﺳﺘﻨﻔﺬ ﺟﺎﻓﺎ ﺳﻜﺮﻳﺒﺖ اﻟﻤﻄﻠﻮﺑﺔ ﻣﻨﻬﺎ إﻟى اﻟﻤﺴﺘﺨﺪم.
 ﺑﺸﻜﻞimports  ﻫﻨﺎك اﺳﺘﺜﻨﺎء واﺣﺪ ﻣﻠﺤﻮظ: ﻓي ﻛﺜﻴﺮ ﻣﻦ اﻷﺣﻴﺎن ﻳﺘﻢ اﺳﺘﺨﺪام
 اﻟﺮﺋﻴﺴﺔ، إذا ﺗﻢ اﺳﺘﺨﺪاﻣﻬﺎ ﺑﻜﺜﺮة ﺳﺘﺴﺘﺪﻋى ﻓي ﻧﺼﻒ JavaScript  ﻣﺘﻜﺮر ﻓي ﺣﺰﻣﺔ 
ﺻﻔﺤﺎت اﻟﻤﻮﻗﻊ ﻋﻠى اﻷﻗﻞ.
(:Prefetching ) . اﻟﺘﺤﻀﻴﺮ اﻟﻤُﺴﺒﻖ 6
 -اﻟﺘي ﺗﺴﺘﺨﺪم ﻟﺮﺑﻂ اﻟﺼﻔﺤﺎت ﺑﺒعﻀﻬﺎ- ﺗﺪﻋﻢ Link  ﻓي اﻟﺮﺑﻂ ﺑﻴﻦ اﻟﻤﻜﻮّﻧﺎت ﺑـ 
 اﻟﺬي ﻳﻘﻮم ﺗﻠﻘﺎﺋﻴﺎً ﺑﺈﻋﺪاد ﻣﻮارد اﻟﺼﻔﺤﺔ ﻣﺴﺒﻘﺎً ﺑﻤﺎ ﻓي ذﻟﻚ prefetch  اﻟﺘﺤﻀﻴﺮ اﻟﻤﺴﺒﻖ
ﺗﻀﻤﻴﻦ اﻟﺸﻔﺮة اﻟﻤﻔﻘﻮدة ﺑﺴﺒﺐ اﻟﺘﻘﺴﻴﻢ اﻟﺘﻠﻘﺎﺋي ﻟﻠﺸﻔﺮة اﻟﺒﺮﻣﺠﻴﺔ . 
(:Dynamic content ) . اﻟﻤﺤﺘﻮى اﻟﺘﻔﺎﻋﻠي 7
. دﻳﻨﺎﻣﻴﻜﻴًﺎ React  ﻳﻤﻜﻨﻚ اﺳﺘﻴﺮاد وﺣﺪات اﻟﺠﺎﻓﺎﺳﻜﺮﺑﺖ وﻣﻜﻮﻧﺎت 
:(Static Exports ) -. اﻟﺘﺼﺪﻳﺮ اﻟﺴﺎﻛﻦ -اﻟﺜﺎﺑﺖ 8
 ﺗﺼﺪﻳﺮ ﻣﻮﻗﻊ ﺛﺎﺑﺖ ﺑﺎﻟﻜﺎﻣﻞ ﻣﻦ Next.js ، ﻳﺘﻴﺢ ﻟﻚ next export  ﺑﺎﺳﺘﺨﺪام اﻷﻣﺮ
ﺗﻄﺒﻴﻘﻚ.
TypeScript  . دﻋﻢ 9
. ﻣﻤﺘﺎز TypeScript   وﺑﻬﺬا ﻳﺄﺗي ﻣﻊ دﻋﻢ TypeScript   ﺑﻠﻐﺔ Next.js ﺗﻤﺖ ﻛﺘﺎﺑﺔ
، ﻫﻤﺎ أداﺗﺎن ﻗﻮﻳﺘﺎن ﻳﻤﻜﻨﻨﺎ اﺳﺘﺨﺪاﻣﻬﺎ ﻟﺒﻨﺎء ﻣﺸﺎرﻳعﻨﺎ، واﻟﻘﺎﺳﻢ Gatsb y وNext.js
. وﻳﺄﺗﻴﺎن ﻣﺠﺮدان ﻣﻦ ﻣﻜﺘﺒﺔ React  اﻟﻤﺸﺘﺮك ﺑﻴﻨﻬﻤﺎ أﻧﻬﻤﺎ ﺗعﻤﻼن ﺗﺤﺖ ﻏﻄﺎء 
 اﻟﺘي ﻛﻨﺎ ﻧﺠﻬّﺰﻫﺎ ﻳﺪوﻳﺎً ﻓي اﻟﺴﺎﺑﻖ. low-level  وﻛﻞ ﺗﻠﻚ اﻷدوات webpack
 ﻻ ﻳﺴﺎﻋﺪك ﻓي إﻧﺸﺎء ﺗﻄﺒﻴﻖ ﻳﺘﻢ ﻋﺮﺿﻪ ﻣﻦ ﺟﺎﻧﺐ اﻟﺨﺎدوم create-react-app
ﺑﺴﻬﻮﻟﺔ. ﻳﺘﻢ ﺗﻮﻓﻴﺮ ﺧﺼﺎﺋﺺ ﻣﺜﻞ: ﺗﺤﺴﻴﻦ ﻣﺤﺮﻛﺎت اﻟﺒﺤﺚ، اﻟﺴﺮﻋﺔ ..إﻟﺦ، ﺑﻮاﺳﻄﺔ 
.Gatsb y وNext.js أدوات ﻣﺜﻞ
؟Gatsb y  أﻓﻀﻞ ﻣﻦ Next.js  ﻣﺘى ﻳﻜﻮن
، وﻟﻜﻦ ﺑﻄﺮﻳﻘﺘﻴﻦ SSR ﻓي اﻟﻌﺮض ﻣﻦ ﺟﺎﻧﺐ اﻟﺨﺎدوم ﻳﻤﻜﻦ ﻟﻜﻠﻴﻬﻤﺎ اﻟﻤﺴﺎﻋﺪة 
ﻣﺨﺘﻠﻔﺘﻴﻦ.
 ﻫي ﻣﻮﻟﺪ ﻣﻮﻗﻊ ﺳﺎﻛﻦ/ﺛﺎﺑﺖ، دون ﺧﺎدوم. ﺗﻘﻮم ﺑﺈﻧﺸﺎء Gatsb yاﻟﻨﺘﻴﺠﺔ اﻟﻨﻬﺎﺋﻴﺔ ﻟـ
 أو ﻣﻮﻗﻊ اﺳﺘﻀﺎﻓﺔ ﺗﺸﺎﺑﻬﻬﺎ. Netlify  اﻟﻤﻮﻗﻊ، ﺛﻢ ﻧﺸﺮ ﺗﻄﺒﻴﻘﻚ ﺑﺸﻜﻞ ﺛﺎﺑﺖ ﻋﻠى
، ﻣﻤﺎSSR  ﻳﻤﻜﻨﻬﺎ ﻣﻦ ﺟﺎﻧﺐ اﻟﺨﺎدوم ﻋﻤﻞ Back-end   واﺟﻬﺔ ﺧﻠﻔﻴﺔ Next.js ﻳﻮﻓﺮ
ﻳﺴﻤﺢ ﻟﻚ ﺑﺈﻧﺸﺎء ﻣﻮﻗﻊ وﻳﺐ ﺗﻔﺎﻋﻠي، ﻣﻤﺎ ﻳعﻨي أﻧﻚ ﺳﺘﻨﺸﺮه ﻋﻠى ﻧﻈﺎم أﺳﺎﺳي ﻳﻤﻜﻨﻪ 
.Node.js  ﺗﺸﻐﻴﻞ
 ﺑﺪﻻGatsb y  إﻧﺸﺎء ﻣﻮﻗﻊ ﺛﺎﺑﺖ أﻳﻀًﺎ، ﻟﻜﻨﻨي ﻻ أﻓﻀّﻞ ذﻟﻚ وأﺳﺘﺨﺪم Next.js ﻳﻤﻜﻦ ﻟـ
ﻋﻨﻬﺎ.create-react-app وGatsby وNext.js اﻟﻔﺮق ﺑﲔ
Gatsb y إذا ﻛﺎن ﻫﺪﻓي ﻫﻮ إﻧﺸﺎء ﻣﻮﻗﻊ ﺛﺎﺑﺖ، ﻓﺴﺄواﺟﻪ ﺻﻌﻮﺑﺔ ﻓي اﻻﺧﺘﻴﺎر ورﺑﻤﺎ ﻳﻤﺘﻠﻚ
ﻧﻈﺎﻣًﺎ ﺑﻴﺌﻴًﺎ أﻓﻀﻞ ﻣﻦ اﻟﻤﻜﻮﻧﺎت اﻹﺿﺎﻓﻴﺔ اﻟﺠﺎﻫﺰة، ﺑﻤﺎ ﻓي ذﻟﻚ اﻟﻌﺪﻳﺪ ﻣﻦ اﻟﻤﺪوّﻧﺎت ﻋﻠى 
وﺟﻪ اﻟﺨﺼﻮص.
 اﻋﺘﻤﺎدًاﺗﻜﺮﻫﻪ ، وﻫﻮ ﺷيء ﻗﺪ ﺗﺤﺒﻪ أو GraphQL   أﻳﻀًﺎ ﺑﺸﻜﻞ ﻛﺒﻴﺮ ﻋﻠى Gatsb y ﻳعﺘﻤﺪ
ﻋﻠى آراﺋﻚ واﺣﺘﻴﺎﺟﺎﺗﻚ. 
.Node.js  ، ﻳﺠﺐ ﺗﺜﺒﻴﺖ Next.js ﻟﺘﺜﺒﻴﺖ
 ﻋﻠىnode -v ` . ﺗﺤﻘﻖ ﻣﻦ ﺗﻨﻔﻴﺬ ﻫﺬا اﻷﻣﺮ Node  ﺗﺄﻛﺪ ﻣﻦ أن ﻟﺪﻳﻚ أﺣﺪث إﺻﺪار ﻣﻦ
 ./https://nodejs.or g  ﻣﺪرج ﻓي LTS ﺟﻬﺎزك، وﻗﺎرﻧﻪ ﺑﺄﺣﺪث إﺻﺪار 
.Terminal  ﻣﺘﺎﺣﺔ ﻓي ﺳﻄﺮ اﻷواﻣﺮ npm ، ﺳﺘﻜﻮن أواﻣﺮ Node.js  ﺑعﺪ ﺗﺜﺒﻴﺖ
 أو اﻷﺳﻠﻮب اﻟﺘﻘﻠﻴﺪي create-next-app  ﻳﻤﻜﻨﻨﺎ اﺧﺘﻴﺎر ﻣﺴﺎرﻳﻦ اﻵن: اﺳﺘﺨﺪام
 ﻳﺪوﻳًﺎ.Next اﻟﺬي ﻳﺘﻀﻤﻦ ﺗﺜﺒﻴﺖ وإﻋﺪاد ﺗﻄﺒﻴﻖ
ﻓﻬﺬا ﻫﻮcreate-react-app ،create-next-app  إذا ﻛﻨﺖ ﻣﻌﺘﺎدًا ﻋﻠى ذﻟﻚ 
، ﻛﻤﺎ ﻳﻮﺣي React   ﺑﺪﻻً ﻣﻦ ﺗﻄﺒﻴﻖ Next اﻟﺸيء ﻧﻔﺴﻪ -ﺑﺎﺳﺘﺜﻨﺎء أﻧﻪ ﻳﻨﺸئ ﺗﻄﺒﻴﻖ
اﻻﺳﻢ.
 ﺑﺪاﻳﺔ ﻣﻦ اﻹﺻﺪار npx  ﺳﻠﻔﺎ، واﻟﺬي ﻳﺄﺗي ﻣﻊ اﻷﻣﺮ Node.js  أﻓﺘﺮض أﻧﻚ ﻗﻤﺖ ﺑﺘﺜﺒﻴﺖ 
 ﻣﺜﻼً ﻣﻨﺬ أﻛﺜﺮ ﻣﻦ ﻋﺎﻣﻴﻦ ﻓي وﻗﺖ ﻛﺘﺎﺑﺔ ﻫﺬا اﻟﻜﺘﻴّﺐ. ﺗﺘﻴﺢ ﻟﻨﺎ ﻫﺬه اﻷداة اﻟﻤﻔﻴﺪة 5.2
: وﺗﻨﻔﻴﺬه، وﺳﻨﺴﺘﺨﺪﻣﻪ ﻋﻠى اﻟﻨﺤﻮ اﻟﺘﺎﻟي JavaScript  ﺗﻨﺰﻳﻞ أﻣﺮ
npx create-next-appNext.js ﺗﻨﺼﻴﺐ
create-next-app ﺑﺎﺳﺘﺨﺪام
ﻳﻄﻠﺐ اﻷﻣﺮ: اﺳﻢ اﻟﺘﻄﺒﻴﻖ وﻳﻨﺸئ ﻣﺠﻠﺪًا ﺟﺪﻳﺪًا ﻟﻚ ﺑﻬﺬا اﻻﺳﻢ ﻧﻔﺴﻪ، ﺛﻢ ﻳﻘﻮم ﺑﺘﻨﺰﻳﻞ 
 ، ﻣﺠﻤّﻌﺔ ﻓي ﻣﻠﻒ react  ،react-dom  ،next  ﺟﻤﻴﻊ اﻟﺤﺰم اﻟﺘي ﻳﺤﺘﺎﺟﻬﺎ 
 ﻛﻤﺎ ﺗﻮﺿﺤﻪ اﻟﺼﻮرة اﻟﺘﺎﻟﻴﺔ: package.json `
:npm run dev  ﻳﻤﻜﻨﻚ ﺗﺸﻐﻴﻞ اﻟﻤﺸﺮوع ﻋﻦ ﻃﺮﻳﻖ اﻷﻣﺮ 
: http: //localhost:3000  وإﻟﻴﻚ اﻟﻨﺘﻴﺠﺔ ﻋﻠى
، ﻷﻧﻬﺎ ﺗﻤﻨﺤﻚ ﻫﻴﻜﻼً وﻧﻤﻮذﺟًﺎ Next.js ﻫﺬه ﻫي اﻟﻄﺮﻳﻘﺔ اﻟﻤُﻮﺻى ﺑﻬﺎ ﻟﺒﺪء ﺗﻄﺒﻴﻖ 
ﻟﻠﺘعﻠﻴﻤﺎت اﻟﺒﺮﻣﺠﻴﺔ اﻟﺠﺎﻫﺰة. ﻫﻨﺎك أﻛﺜﺮ ﻣﻦ ﻣﺠﺮد ﻧﻤﻮذج ﺗﻄﺒﻴﻖ اﻓﺘﺮاﺿي؛ ﻳﻤﻜﻨﻚ 
اﺳﺘﺨﺪام أي ﻣﻦ اﻷﻣﺜﻠﺔ اﻟﻤﺨﺰﻧﺔ ﻋﻠى 
 ﺑﺎﺳﺘﺨﺪام اﻟﺨﻴﺎر https://github.com/zeit/ne xt.js/tr ee/canary/e xamples
:. ﻋﻠى ﺳﺒﻴﻞ اﻟﻤﺜﺎل ﺟﺮب example--
npx create-next-app --example blog-starter
ﻣﻤﺎ ﻳﻤﻨﺤﻚ ﻧﺴﺨﺔ اﻓﺘﺮاﺿﻴﺔ ﻟﻤﺪوﻧﺔ ﺟﺎﻫﺰة ﻗﺎﺑﻠﺔ ﻟﻼﺳﺘﺨﺪام ﻋﻠى اﻟﻔﻮر ﻣﻊ ﻣﻌﺎﻳﻨﺔ 
:syntax highlighting  ﺑﺎﻷﻟﻮان أﻳﻀﺎ
Next  إذا ﻛﻨﺖ ﺗﺮﻏﺐ ﻓي إﻧﺸﺎء ﺗﻄﺒﻴﻖ create-next-app  ﻳﻤﻜﻨﻚ ﺗﺠﻨﺐ ﻃﺮﻳﻘﺔ
ﻣﻦ اﻟﺒﺪاﻳﺔ. وإﻟﻴﻚ اﻟﻔﻜﺮة:
ﻗﻢ ﺑﺈﻧﺸﺎء ﻣﺠﻠﺪ ﻓﺎرغ ﻓي أي ﻣﻜﺎن ﺗﺮﻳﺪ ﻋﻠى ﺟﻬﺎزك، ﻋﻠى ﺳﺒﻴﻞ اﻟﻤﺜﺎل ﻓي اﻟﻤﺠﻠﺪ 
اﻟﺮﺋﻴﺲ اﻟﺨﺎص ﺑﻚ، اﻧﺘﻘﻞ إﻟﻴﻪ ﻋﺒﺮ ﻛﺘﺎﺑﺔ اﻷواﻣﺮ اﻟﺘﺎﻟﻴﺔ: 
mkdir nextjs
cd nextjs
:وأﻧﺸئ أول ﻣﺠﻠّﺪ ﻟﻤﺸﺮوﻋﻚ 
mkdir firstproject
cd firstproject ﻳﺪوﻳًﺎNext.js إﻧﺸﺎء ﺗﻄﺒﻴﻖ
:Node   ﻟﺘﻬﻴﺌﺔ ﻣﺸﺮوع npm اﻵن اﺳﺘﺨﺪم
npm init -y
 ﻻﺳﺘﺨﺪام اﻹﻋﺪادات اﻻﻓﺘﺮاﺿﻴﺔ ﻟﻤﺸﺮوع ﻣﺎ، وﻣﻞء ﻧﻤﻮذج npm ﻟـy- ﻳﺸﻴﺮ اﻟﺨﻴﺎر
 ﻟﻠﻤﻠﻒ.package.json
:React  وNext اﻵن ﻗﻢ ﺑﺘﺜﺒﻴﺖ
npm install next react react-dom
:ﻳﺠﺐ أن ﻳﺤﺘﻮي ﻣﺠﻠﺪ ﻣﺸﺮوﻋﻚ اﻵن ﻋﻠى ﻣﻠﻔﻴﻦ 
اﻷول:
ﺗﺼﻔّﺢ اﻟﺪﻟﻴﻞ اﻟﺘﻮﺛﻴﻘي ﻟﻠﺤﺰم  package.json
ﺗﺼﻔّﺢ اﻟﺪﻟﻴﻞ اﻟﺘﻮﺛﻴﻘي ﺣﻮل ﻗﻔﻞ اﻟﺤﺰﻣﺔ  package-lock.json
:اﻟﺜﺎﻧي
.node_modules  ﻣﺠﻠﺪ
اﻓﺘﺢ ﻣﺠﻠﺪ اﻟﻤﺸﺮوع ﺑﺎﺳﺘﺨﺪام اﻟﻤﺤﺮر اﻟﻤﻔﻀﻞ ﻟﺪﻳﻚ. اﻟﻤﺤﺮر اﻟﻤﻔﻀﻞ ﻟﺪي ﻫﻮ 
ﻓي .code   ﻣﺜﺒﺘًﺎ ﻋﻠى ﺟﻬﺎزك، ﻓﻴﻤﻜﻨﻚ اﻷﻣﺮ vscode  . إذا ﻛﺎن ﺑﺮﻧﺎﻣﺞ Vscode
.ﻫﺬااﻟﻄﺮﻓﻴﺔ ﻣﻦ ﻓﺘﺢ اﻟﻤﺠﻠﺪ اﻟﺤﺎﻟي ﻓي اﻟﻤﺤﺮر إذا ﻛﺎن اﻷﻣﺮ ﻻ ﻳعﻤﻞ، ﻓﺮاﺟﻊ 
 ﻳﺤﺘﻮي اﻵن ﻋﻠى ﻫﺬا اﻟﻤﺤﺘﻮى: package.json  ﻣﻠﻒ
{
  "name": "firstproject" ,
  "version" : "1.0.0",
  "description" : "",
  "main": "index.js" ,
  "scripts" : {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords" : [],
  "author" : "",
  "license" : "ISC",
  "dependencies" :  {
    "next": "^10.1.1" ,
    "react": "^16.11.0" ,
    "react-dom" : "^16.11.0"
  }
}
: ﺑـscripts  واﺳﺘﺒﺪل ﺟﺰء
"scripts" : {
  "dev": "next",
  "build": "next build" ,
  "start": "next start"
}
.، اﻟﺘي ﺳﻨﺴﺘﺨﺪﻣﻬﺎ ﻗﺮﻳﺒًﺎ Next.js ﻹﺿﺎﻓﺔ أواﻣﺮ ﺑﻨﺎء وﺗﺼﺪﻳﺮ ﻣﺸﺮوﻋﻨﺎ ﻋﻠى 
ﻟﺘغﻴﻴﺮ ﻣﻨﻔﺬ اﻟﺘﺸﻐﻴﻞ، ﻓي ﻫﺬا", dev": "next -p 3001 "  اﺳﺘﺨﺪمﻧﺼﻴﺤﺔ: 
.3001  اﻟﻤﺜﺎل، ﻋﻠى اﻟﻤﻨﻔﺬ
.index.js  وإﺿﺎﻓﺔ ﻣﻠﻒ pages  اﻵن ﻗﻢ ﺑﺈﻧﺸﺎء ﻣﺠﻠﺪ
 اﻷول. ﺳﻨﻘﻮم ﺑﺘﺼﺪﻳﺮه اﻓﺘﺮاﺿﻴﺎ: React  ﻓي ﻫﺬا اﻟﻤﻠﻒ، ﻟﻨﻨﺸئ ﻣﻜﻮّن
const Index = () => (
  <div>
    <h1>Home page </h1>
  </div>
)
export default Index
ﻟﺒﺪء ﺧﺎدوم اﻟﺘﻄﻮﻳﺮ npm run dev  ، ﻗﻢ ﺑﺘﺸﻐﻴﻞ Terminal  اﻵن ﺑﺎﺳﺘﺨﺪام اﻟﻄﺮﻓﻴﺔ
.Next
.localhost  ، ﻋﻠى اﻟﻤﻀﻴﻒ اﻟﻤﺤﻠي 3000  ﺳﻴﺘﻢ ﺗﺸﻐﻴﻞ اﻟﻤﺸﺮوع ﻋﻠى ﻣﻨﻔﺬ 
. ﻓي ﻣﺘﺼﻔﺤﻚ ﻟﺮؤﻳﺘﻪ http://localhost:3000  اﻓﺘﺢ

 ﻋﻨﺪ اﺳﺘﺨﺪاﻣﻬﺎ، ﺣﻴﺚ Next.js دﻋﻨﺎ ﻧﺘﺤﻘﻖ ﻣﻦ أن اﻟﺘﻄﺒﻴﻖ ﻳعﻤﻞ، ﻳﻤﻜﻦ ﻣﻼﺣﻈﺔ ﻗﻮة
 إﻟى اﻟﻤﺘﺼﻔّﺢ، واﻟﺬي ﻟﻪ HTML ﻳﻘﻮم ﺑعﺮض اﻟﺼﻔﺤﺎت ﻣﻦ ﺟﺎﻧﺐ اﻟﺨﺎدوم وﻳﺘﻢ ﺗﺴﻠﻴﻢ اﻟـ 
ﺛﻼث ﻓﻮاﺋﺪ رﺋﻴﺴﺔ: 
 ﻣﻤﺎ ﺳﻴﺠﻌﻞ اﻟﺘﻄﺒﻴﻖ ﺳﺮﻳعﺎً. React  ﻻ ﻳﺤﺘﺎج ﻣﺘﺼﻔّﺢ اﻟﻤﺴﺘﺨﺪم إﻟى ﻋﺮض 
ﺳﺘﻘﻮم ﻣﺤﺮﻛﺎت اﻟﺒﺤﺚ ﺑﻔﻬﺮﺳﺔ اﻟﺼﻔﺤﺎت دون اﻟﺤﺎﺟﺔ إﻟى ﺗﺸﻐﻴﻞ 
 ﺑﺤﻞّ ﻫﺬهGoogle   ﻣﻦ ﺟﺎﻧﺐ اﻟﻤﺴﺘﺨﺪم. ﺑﺪأت ﻣﺤﺮﻛﺎت JavaScript
اﻟﻤﺸﻜﻠﺔ، وﻟﻜﻦ اﻋﺘﺮﻓﺖ ﻻﺣﻘﺎً ﺑﺄﻧﻬﺎ ﻋﻤﻠﻴﺔ ﺑﻄﻴﺌﺔ وﺗﺄﺧﺮ اﻷرﺷﻔﺔ ﻛﻤﺎ ﻳﺠﺐ 
 ﻗﺪر اﻹﻣﻜﺎن، إذا ﻛﻨﺖ ﺗﺮﻏﺐ Google  ﻋﻠﻴﻚ ﺑﺼﻔﺘﻚ ﻣﻨﺸﺌﺎ ﻟﻠﺘﻄﺒﻴﻖ ﻣﺴﺎﻋﺪة
ﻓي اﻟﺤﺼﻮل ﻋﻠى ﺗﺮﺗﻴﺐ ﺑﺤﺚ ﺟﻴﺪ. 
 ﻟﻤﻌﻠﻮﻣﺎت ﺗﻄﺒﻴﻘﻚ ﻋﻠى meta tags  ﻳﻤﻜﻨﻚ اﻟﺤﺼﻮل ﻋﻠى ﻣﻌﺎﻳﻨﺎت وﺻﻔﻴﺔ
ﻣﻮاﻗﻊ اﻟﺘﻮاﺻﻞ اﻻﺟﺘﻤﺎﻋي وﺗﺨﺼﻴﺺ اﻟﻌﻨﻮان واﻟﻮﺻﻒ ﻷي ﻣﻦ ﺻﻔﺤﺎﺗﻚ
 وﻣﺎ إﻟى ذﻟﻚ. Twitter  وFacebook  اﻟﻤﺸﺘﺮﻛﺔ ﻋﻠى 
، ﻳﻤﻜﻨﻚ اﻟﻨﻘﺮ ﺑﺰر اﻟﻔﺄرة Chrome  دﻋﻮﻧﺎ ﻧﻠﻘي ﻧﻈﺮة ﻋﻠى ﻣﺼﺪر اﻟﺘﻄﺒﻴﻖ. ﺑﺎﺳﺘﺨﺪام 
.ﻋﺮض ﻣﺼﺪر اﻟﺼﻔﺤﺔ" اﻷﻳﻤﻦ ﻓي أي ﻣﻜﺎن ﻓي اﻟﺼﻔﺤﺔ ، واﻟﻀﻐﻂ ﻋﻠى "SSR ﻣﻌﺎﻳﻨﺔ اﻟﺸﻔﺮة اﻟﻤﺼﺪرﻳﺔ ﻟﻠﺘﺤﻘﻖ ﻣﻦ ﻋﻤﻞ
إذا ﻗﻤﺖ ﺑعﺮض ﻣﺼﺪر اﻟﺼﻔﺤﺔ ، ﻓﺴﺘﺮى 
، ﺟﻨﺒًﺎHTML body  اﻟﻤﻘﺘﻄﻒ ﻓي وﺳﻢ< div><h1>Home page</h1></div >
.- -ﺣﺰم اﻟﺘﻄﺒﻴﻘﺎت JavaScript  إﻟى ﺟﻨﺐ ﻣﻊ ﻣﺠﻤﻮﻋﺔ ﻣﻦ ﻣﻠﻔﺎت
 ﻳعﻤﻞ ﺑﺎﻟﻔﻌﻞ. SSR ﻻ ﻧﺤﺘﺎج إﻟى إﻋﺪادات أﺧﺮى، ﻓﺎﻟﻌﺮض ﻣﻦ ﺟﺎﻧﺐ اﻟﺨﺎدوم 
 ﻋﻠى ﻣﺘﺼﻔّﺢ اﻟﻤﺴﺘﺨﺪم، وﺳﻴﻜﻮن ﻫﻮ أﺣﺪ اﻟﺘﻔﺎﻋﻼت ﻣﺜﻞ React  ﺳﻴﺘﻢ ﺗﺸﻐﻴﻞ ﺗﻄﺒﻴﻖ
اﻟﻨﻘﺮ ﻓﻮق اﻟﺮواﺑﻂ. ﻟﻜﻦ إﻋﺎدة ﺗﺤﻤﻴﻞ اﻟﺼﻔﺤﺔ ﺳﺘﺆدي إﻟى إﻋﺎدة ﺗﺤﻤﻴﻠﻬﺎ ﻣﻦ ﺟﺎﻧﺐ 
، ﻳﺠﺐ أﻻ ﻳﻜﻮن ﻫﻨﺎك اﺧﺘﻼف ﻓي اﻟﻨﺘﻴﺠﺔ داﺧﻞ اﻟﻤﺘﺼﻔﺢ Next.js اﻟﺨﺎدوم. وﺑﺎﺳﺘﺨﺪام
- ﻳﺠﺐ أن ﺗﺒﺪو اﻟﺼﻔﺤﺔ اﻟﺘي ﻳعﺮﺿﻬﺎ اﻟﺨﺎدوم ﺗﻤﺎﻣًﺎ ﻣﺜﻞ اﻟﺼﻔﺤﺔ اﻟﺘي ﻳعﺮﺿﻬﺎ 
اﻟﻤﺴﺘﺨﺪم.
ﻋﻨﺪﻣﺎ اﺳﺘعﺮﺿﻨﺎ ﻣﺼﺪر اﻟﺼﻔﺤﺔ، رأﻳﻨﺎ ﻣﺠﻤﻮﻋﺔ ﻣﻦ ﻣﻠﻔﺎت اﻟﺠﺎﻓﺎﺳﻜﺮﺑﺖ ﺗﻢ ﺗﻀﻤﻴﻨﻬﺎ: (The app bundles) ﺣُﺰم اﻟﺘﻄﺒﻴﻖ
 ﻹﻇﻬﺎره ﺑﺸﻜﻞ أﻓﻀﻞ، ﺣﺘى ﻧﺘﻤﻜﻦ ﻣﻦ HTML  ﻣُﻨﺴﻖ ﺳﻨﻀﻊ اﻟﺸﻔﺮة اﻟﻤﺼﺪرﻳﺔ ﻓي 
ﻓﻬﻤﻪ:
!<DOCTYPE html>
<html>
<head>
    <meta charSet="utf-8" />
    <meta name="viewport " content="width=device-width,minimum-scale=1,init
    <meta name="next-head-count " content="2" />
    <link rel="preload" href="/_next/static/development/pages/index.js?ts=
    <link rel="preload" href="/_next/static/development/pages/_app.js?ts=1
    <link rel="preload" href="/_next/static/runtime/webpack.js?ts=15728631
    <link rel="preload" href="/_next/static/runtime/main.js?ts=15728631160
</head>
<body>
    <div id="__next">
        <div>
            <h1>Home page </h1></div>
    </div>
    <script src="/_next/static/development/dll/dll_01ec57fc9b90d43b98a8.js
    <script id="__NEXT_DATA__ " type="application/json ">{"dataManager":"[]"
    <script async="" data-next-page ="/" src="/_next/static/development/pag
    <script async="" data-next-page ="/_app" src="/_next/static/development
    <script src="/_next/static/runtime/webpack.js?ts=1572863116051 " async=
    <script src="/_next/static/runtime/main.js?ts=1572863116051 " async="">
</body>
</html>
، ﺑﺎﺳﺘﺨﺪام head  ( ﻓيpreloaded )  ﻣﻠﻔﺎت ﺟﺎﻓﺎﺳﻜﺮﻳﺒﺖ ﺗﻢ ﺗﺤﻤﻴﻠﻬﺎ ﻣﺴﺒﻘﺎ 4 ﻟﺪﻳﻨﺎ
:"rel="preload" as="script
next/static/development/pages/index.js  96 L OC_/
next/static/development/pages/_app.js  5900 L OC_/
next/static/runtime/webpack.js  939 L OC_/
next/static/runtime/main.js  12k L OC_/
( ﻓي أﻗﺮب وﻗﺖ ﻣﻤﻜﻦ ﻗﺒﻞ أن load) ﻫﺬا ﻳعﻨي أن اﻟﻤﺘﺼﻔّﺢ ﺳﻴﻘﻮم ﺑﺘﺤﻤﻴﻞ اﻟﻤﻠﻔﺎت 
ﻳﺘﻢ ﻋﻤﻞ ﺗﺪﻓﻖ ﻟﻠﺒﻴﺎﻧﺎت. دون ذﻟﻚ، ﺳﻴﺘﻢ ﺗﺤﻤﻴﻞ ﻣﻠﻔﺎت اﻟﺠﺎﻓﺎﺳﻜﺮﺑﺖ ﻣﻊ ﺗﺄﺧﻴﺮ
إﺿﺎﻓي، وﻫﺬا ﻳﺤﺴّﻦ أداء ﺗﺤﻤﻴﻞ اﻟﺼﻔﺤﺔ. 
، ﺟﻨﺒًﺎ إﻟى ﺟﻨﺐ ﻣﻊ: body  ﺛﻢ ﻳﺘﻢ ﺗﺤﻤﻴﻞ ﻫﺬه اﻟﻤﻠﻔﺎت اﻷرﺑعﺔ ﻓي ﻧﻬﺎﻳﺔ وﺳﻢ
next/static/development/dll/dll_01ec57fc9b90d43b98a8.js _/
: اﻟﺬي ﻳعﻴّﻦ ﺑعﺾ اﻹﻋﺪادات اﻻﻓﺘﺮاﺿﻴﺔ ﻟﺒﻴﺎﻧﺎت اﻟﺼﻔﺤﺔ JSON  وﻣﻘﺘﻄﻒ
<script id ="__NEXT_DATA__"  type="application/json" >
{
  "dataManager" : "[]",
  "props": {
    "pageProps" :  {}
  },
  "page": "/",
  "query": {},
  "buildId" : "development" ,
  "nextExport" : true,
  "autoExport" : true
}
</script>
ﺗﻘﺴﻴﻢ اﻟﺸﻔﺮةﺗﻘﻮم ﻣﻠﻔﺎت اﻟﺤﺰم اﻷرﺑعﺔ اﻟﺘي ﺗﻢ ﺗﺤﻤﻴﻠﻬﺎ ﺑﺘﻨﻔﻴﺬ ﻣﻴﺰة واﺣﺪة ﺗﺴﻤى  
index  ﻳﻮﻓﺮ ﻣﻠﻒ اﻟﺘعﻠﻴﻤﺎت اﻟﺒﺮﻣﺠﻴﺔ اﻟﻼزﻣﺔ ﻟﺼﻔﺤﺔ index.js  . واﻟﺒﺮﻣﺠﻴﺔ
اﻟﺮﺋﻴﺴﺔ، وإذا ﻛﺎﻧﺖ ﻟﺪﻳﻨﺎ اﻟﻤﺰﻳﺪ ﻣﻦ اﻟﺼﻔﺤﺎت ﺳﻴﻜﻮن ﻟﺪﻳﻨﺎ اﻟﻤﺰﻳﺪ ﻣﻦ اﻟﺤﺰم ﻟﻜﻞ 
ﺻﻔﺤﺔ، واﻟﺘي ﺳﺘﻘﻮم ﺑﺘﺤﻤﻴﻠﻬﺎ ﻓﻘﻂ إذا ﻟﺰم اﻷﻣﺮ واﺳﺘعﺮض اﻟﻤﺴﺘﺨﺪم ﺗﻠﻚ اﻟﺼﻔﺤﺔ 
-ﻟﺘﻮﻓﻴﺮ وﻗﺖ ﺗﺤﻤﻴﻞ أﺳﺮع-
ﻫﻞ رأﻳﺖ ﻫﺬا اﻟﺮﻣﺰ اﻟﺼﻐﻴﺮ ﻓي أﺳﻔﻞ ﻳﻤﻴﻦ اﻟﺼﻔﺤﺔ ، واﻟﺬي ﻳﺸﺒﻪ اﻟﺒﺮق؟ 
Prerender ed) إذا ﻗﻤﺖ ﺑﺘﻤﺮﻳﺮ اﻟﻔﺄرة ﻓﻮﻗﻬﺎ، ﻓﺴﺘﻈﻬﺮ ﺻﻔﺤﺔ "ﻣﻌﺮوﺿﺔ ﻣﺴﺒﻘًﺎ 
(":Pageإﻻم ﻳﻌﲏ اﻟﺮﻣﺰ اﻟﺬي ﻳﻈﻬﺮ أﺳﻔﻞ ﻳﻤﲔ اﻟﺼﻔﺤﺔ؟
(، أنdevelopment mode ) ﻳﻈﻬﺮ ﻓﻘﻂ ﻓي وﺿﻊ اﻟﺘﻄﻮﻳﺮ_ ﻳﺨﺒﺮك ﻫﺬا اﻟﺮﻣﺰ، اﻟﺬي 
اﻟﺼﻔﺤﺔ ﻣﺆﻫﻠﺔ ﻟﻠﺘﺤﺴﻴﻦ اﻟﺘﻠﻘﺎﺋي اﻟﺜﺎﺑﺖ، ﻣﻤﺎ ﻳعﻨي ﺑﺸﻜﻞ أﺳﺎﺳي أﻧﻬﺎ ﻻ ﺗعﺘﻤﺪ ﻋﻠى
HTML  اﻟﺒﻴﺎﻧﺎت اﻟﺘي ﻳﺘﻢ ﺟﻠﺒﻬﺎ ﻓي وﻗﺖ اﻻﺳﺘﺪﻋﺎء، وﻳﻤﻜﻦ ﻋﺮﺿﻬﺎ ﻣﺴﺒﻘًﺎ وﺑﻨﺎء ﻣﻠﻒ 
.npm run build  ﺛﺎﺑﺖ ﻓي وﻗﺖ اﻟﺒﻨﺎء ﻋﻨﺪ ﺗﺸﻐﻴﻞ
 اﻟﻤﺮﻓﻘﺔ داﺧﻞ ﻣﻜﻮّن )(getInitialProps  وﻳﻤﻜﻦ ﺗﺤﺪﻳﺪ ﻫﺬا ﻣﻦ ﺧﻼل ﻋﺪم وﺟﻮد
اﻟﺼﻔﺤﺔ.
 ﺛﺎﺑﺖ ﺑﺪﻻً ﻣﻦ HTML  ﻓي ﻫﺬه اﻟﺤﺎﻟﺔ، ﻳﻤﻜﻦ أن ﺗﻜﻮن ﺻﻔﺤﺘﻨﺎ أﺳﺮع ﻷﻧﻬﺎ ﺳﺘُﻘﺪم ﻣﻠﻒ 
.HTML   اﻟﺬي ﻳﻮﻟّﺪ ﻣﻠﻔﺎت Node.js  اﻟﻤﺮور ﻋﺒﺮ ﺧﺎدوم 
non- ) وأﺣﻴﺎﻧﺎ ﻗﺪ ﻳﻈﻬﺮ ﻣﺜﻠﺚ ﺻﻐﻴﺮ ﻛﺄﻳﻘﻮﻧﺔ، أو اﻟﺼﻔﺤﺎت ﻏﻴﺮ ﻣﻌﺮوﺿﺔ ﻣﺴﺒﻘًﺎ 
Next.js ( وﺗعﻨي ﻣﺆﺷّﺮ ﺗﺠﻤﻴﻊ وﻳﻈﻬﺮ ﻋﻨﺪ ﺣﻔﻆ اﻟﺼﻔﺤﺔ. ﻳﻘﻮم prerender ed pages
ﻋﻨﺪ اﻟﺤﻔﻆ ﺑﺎﻟﺘﺤﻤﻴﻞ اﻟﻔﻮري ﻟﻠﺘغﻴﻴﺮات ﻹﻋﺎدة ﺗﺤﻤﻴﻞ اﻟﺸﻔﺮة اﻟﻤﻀﺎﻓﺔ ﺣﺪﻳﺜﺎً ﻓي 
اﻟﺘﻄﺒﻴﻖ ﺗﻠﻘﺎﺋﻴًﺎ.
إﻧﻬﺎ ﻃﺮﻳﻘﺔ راﺋﻌﺔ ﺣﻘًﺎ ﻟﺘﺤﺪﻳﺪ ﻣﺎ إذا ﻛﺎن اﻟﺘﻄﺒﻴﻖ ﻗﺪ ﺗﻢ ﺗﺠﻤﻴعﻪ ﺑﺎﻟﻔﻌﻞ وﻳﻤﻜﻨﻚ اﺧﺘﺒﺎر 
اﻟﺠﺰء اﻟﺬي ﺗعﻤﻞ ﻋﻠﻴﻪ. 
، ﻟﺬا ﻓﺈن إﺣﺪى اﻷدوات اﻟﻤﻔﻴﺪة ﻟﻠﻐﺎﻳﺔ اﻟﺘي ﻧﺤﺘﺎج إﻟى React   ﻋﻠىNext.js ﻳعﺘﻤﺪ
.React De veloper  ﺗﺜﺒﻴﺘﻬﺎ إذا ﻟﻢ ﺗﻜﻦ ﻗﺪ ﻗﻤﺖ ﺑﺬﻟﻚ ﻫي أدوات
، أداة أﺳﺎﺳﻴﺔ Firefox  وChrome  ، اﻟﻤﺘﻮﻓﺮة ﻟﻜﻞ ﻣﻦ React De veloper  ﺗعﺪ أدوات
.React  ﻳﻤﻜﻨﻚ اﺳﺘﺨﺪاﻣﻬﺎ ﻟﻔﺤﺺ ﺗﻄﺒﻴﻖ
 ﻓﺤﺴﺐ، ﻟﻜﻨﻨي أرﻳﺪ ﺗﻮﺿﻴﺤﻬﺎ ﻷﻧﻚ Next.js  ﻟﻴﺴﺖ ﺧﺎﺻﺔ ﺑـ React  اﻵن، أدوات ﺗﻄﻮﻳﺮ
.React  ﻗﺪ ﻻ ﺗﻜﻮن ﻋﻠى دراﻳﺔ ﻛﺎﻣﻠﺔ ﺑﺠﻤﻴﻊ اﻷدوات اﻟﺘي ﺗﻮﻓﺮﻫﺎ 
 اﻟﺘي ﺗﺒﻨي ﺻﻔﺤﺘﻚ، React  ( ﻳﻜﺸﻒ ﻋﻦ ﺷﺠﺮة ﻣﻜﻮﻧﺎت Inspector ) إﻧﻬﺎ ﺗﻮﻓﺮ اﻟﻤﻌﺎﻳﻦ
 واﻟﺨﻄﺎﻓﺎت State   واﻟﺤﺎﻟﺔ Props وﻟﻜﻞ ﻣﻜﻮّن ﻳﻤﻜﻨﻚ اﻻﻧﺘﻘﺎل واﻟﺘﺤﻘﻖ ﻣﻦ اﻟﺨﺎﺻﻴﺎت 
 وﻏﻴﺮ ذﻟﻚ اﻟﻜﺜﻴﺮ. Hooks
، ﻳﻤﻜﻨﻚ ﻓﺘﺢ اﻹﺿﺎﻓﺔ ﻣﻦ ﻣﺘﺼﻔﺤﻚ React De vTools وﺑﻤﺠﺮد اﻻﻧﺘﻬﺎء ﻣﻦ ﺗﺜﺒﻴﺖ 
 وﺳﺘﺠﺪInspect  ، ﺑﺰر اﻟﻔﺄرة اﻷﻳﻤﻦ ﻋﻠى اﻟﺼﻔﺤﺔ، اﻧﻘﺮ ﻓﻮق Chrome  ﺑﻤﺘﺼﻔّﺢ
 .(Proﬁler ) ﺻﻔﺤﺔ اﻟﻤﺤﻠّﻞ و  (Components ) اﻟﻤﻜﻮﻧﺎتﻧﺎﻓﺬﺗﻴﻦ ﺟﺪﻳﺪﺗﻴﻦ:  React DevTools ﺗﻨﺼﻴﺐ إﺿﺎﻓﺔ
إذا ﻗﻤﺖ ﺑﺎﻟﻨﻘﺮ ﻋﻠى ﻧﺎﻓﺬة اﻟﻤﻜﻮﻧﺎت، ﻓﺴﺘﺮى أﻧﻪ ﻓي ﺳﻴﺤﺪد اﻟﻤﺴﺘعﺮض اﻷﺟﺰاء اﻟﺘي 
ﻳﺘﻢ ﺗﻘﺪﻳﻤﻬﺎ ﺑﻮاﺳﻄﺔ ﻫﺬا اﻟﻤﻜﻮن.
،ﻟﻠﻤﻜﻮ ن اﻷﺻﻠي ﺛﻢ إذا ﺣﺪدت أي ﻣﻜﻮّن ﻓي اﻟﺸﺠﺮة، ﻓﺴﺘﻈﻬﺮ ﻟﻚ ﻟﻮﺣﺔ اﻟﻴﻤﻴﻦ ﻣﺮﺟﻌًﺎ 
واﻟﺨﺼﺎﺋﺺ اﻟﻤﻤﺮّرة إﻟﻴﻪ: 
.ﻳﻤﻜﻨﻚ اﻟﺘﻨﻘﻞ ﺑﺴﻬﻮﻟﺔ ﻣﻦ ﺧﻼل اﻟﻀﻐﻂ ﻋﻠى أﺳﻤﺎء اﻟﻤﻜﻮّﻧﺎت
 ﻟﻔﺤﺺ ﻋﻨﺼﺮ Developer T ools وﻛﺬﻟﻚ ﻳﻤﻜﻨﻚ اﻟﻨﻘﺮ ﻓﻮق رﻣﺰ اﻟﻌﻴﻦ ﻓي ﺷﺮﻳﻂ أدوات 
 ﻟﺘﺴﺠﻴﻞ ﺑﻴﺎﻧﺎت اﻟﻤﻜﻮّن ﻓي وﺣﺪة اﻟﺘﺤﻜﻢ. bug . ﻛﻤﺎ ﻳﻤﻜﻨﻚ اﺳﺘﺨﺪام رﻣﺰ DOM
ﻫﺬا راﺋﻊ ﺟﺪًا ﻷﻧﻪ ﺑﻤﺠﺮد ﻃﺒﺎﻋﺔ اﻟﺒﻴﺎﻧﺎت ﻫﻨﺎك، ﻳﻤﻜﻨﻚ اﻟﻨﻘﺮ ﺑﺰر اﻟﻔﺄرة اﻷﻳﻤﻦ ﻓﻮق أي 
ﻋﻨﺼﺮ واﻟﻀﻐﻂ ﻋﻠى "ﺗﺨﺰﻳﻦ ﻛﻤﺘغﻴﺮ ﻋﺎم". ﻋﻠى ﺳﺒﻴﻞ اﻟﻤﺜﺎل، ﻗﻤﺖ ﺑﺎﺳﺘﺨﺪام ﺧﺎﺻﻴﺔ
، وﺗﻤﻜّﻨﺖ ﻣﻦ ﻓﺤﺼﻬﺎ ﻓي وﺣﺪة اﻟﺘﺤﻜﻢ ﺑﺎﺳﺘﺨﺪام اﻟﻤﺘغﻴﺮ اﻟﻤﺆﻗﺖ اﻟﻤﺨﺼﺺ ﻟﻬﺎ url
:temp1
 ﺗﻠﻘﺎﺋﻴًﺎ Next.js ، اﻟﺘي ﻳﺘﻢ ﺗﺤﻤﻴﻠﻬﺎ ﺑﻮاﺳﻄﺔ( Sour ce Maps ) ﺧﺮاﺋﻂ اﻟﻤﺼﺪر ﺑﺎﺳﺘﺨﺪام 
 وﺳﻴﺘﺤﻮل>< ﻓي وﺿﻊ اﻟﺘﻄﻮﻳﺮ، ﻣﻦ ﻟﻮﺣﺔ اﻟﻤﻜﻮﻧﺎت، ﻳﻤﻜﻨﻨﺎ اﻟﻨﻘﺮ ﻓﻮق اﻟﺮﻣﺰ 
(، ﻣﻊ ﻋﺮض اﻟﺸﻔﺮة اﻟﻤﺼﺪرﻳﺔ ﻟﻠﻤﻜﻮّن: Sour ce panel )  إﻟى ﻟﻮﺣﺔ اﻟﻤﺼﺪر DevTools
 ﻓي اﻟﺘﻄﺒﻴﻖ وﻣﻌﺮﻓﺔ ﻣﺎﺑﺘﺴﺠﻴﻞ اﻟﺘﻔﺎﻋﻼت  أﻛﺜﺮ روﻋﺔ، ﻳﺴﻤﺢ ﻟﻨﺎ اﻟﻤﺤﻠّﻞﺗعﺪ ﻧﺎﻓﺬة 
ﺳﻴﺤﺪث. ﻻ ﻳﻤﻜﻨﻨي ﻋﺮض ﻣﺜﺎل اﻵن، ﻷﻧﻪ ﻳﺤﺘﺎج إﻟى ﻣﻜﻮﻧﻴﻦ ﻋﻠى اﻷﻗﻞ ﻹﻧﺸﺎء ﺗﻔﺎﻋﻞ، 
وﻟﺪﻳﻨﺎ ﻋﻨﺼﺮ واﺣﺪ ﻓﻘﻂ اﻵن. ﺳﺄﺗﺤﺪث ﻋﻦ ﻫﺬا ﻻﺣﻘًﺎ.
React De veloper  ، ﻟﻜﻦ أدوات Chrome  ﻟﻘﺪ ﻋﺮﺿﺖ ﺟﻤﻴﻊ ﻟﻘﻄﺎت اﻟﺸﺎﺷﺔ ﻟﻤﺘﺼﻔّﺢ 
:Firefox ﺗعﻤﻞ ﺑﻨﻔﺲ اﻟﻄﺮﻳﻘﺔ ﻓي
، أودّNext.js ، واﻟﺘي ﺗعﺘﺒﺮ ﺿﺮورﻳﺔ ﻟﺒﻨﺎء ﺗﻄﺒﻴﻖ React  ﺑﺎﻹﺿﺎﻓﺔ إﻟى أدوات اﻟﻤﻄﻮرﻳﻦ ﻟـ
.Next.js اﻟﺘﺄﻛﻴﺪ ﻋﻠى ﻃﺮﻳﻘﺘﻴﻦ ﻟﺘﺼﺤﻴﺢ أﺧﻄﺎء ﺗﻄﺒﻴﻘﺎت
. اﻟﻄﺮﻳﻘﺔ اﻟﺘي ﺗعﻤﻞ ﺑﻬﺎ Console API  وﺟﻤﻴﻊ أدوات)( console.log  اﻷوﻟى ﻫي
 ﺳﺘﺠﻌﻞ ﺑﻴﺎن اﻟﺴﺠﻞ ﻳعﻤﻞ ﻓي وﺣﺪة ﺗﺤﻜﻢ اﻟﻤﺘﺼﻔﺢ أو ﻓي اﻟﻄﺮﻓﻴﺔ Next ﺗﻄﺒﻴﻘﺎت
.npm run dev  ﺣﻴﺚ ﺑﺪأت ﺑﺎﺳﺘﺨﺪام
 إﻟﻴﻬﺎ، URL ﻋﻠى وﺟﻪ اﻟﺨﺼﻮص، إذا ﺗﻢ ﺗﺤﻤﻴﻞ اﻟﺼﻔﺤﺔ ﻣﻦ اﻟﺨﺎدوم، ﻋﻨﺪﻣﺎ ﺗﻮﺟﻪ ﻋﻨﻮان
 ، ﻓﺈن أي ﺗﺴﺠﻴﻞ ﻟﻮﺣﺪة اﻟﺘﺤﻜﻢ ﻳﺤﺪث ﻓي CMD / ctrl-R  / أو ﺗﻀﻐﻂ ﻋﻠى زر اﻟﺘﺤﺪﻳﺚ 
اﻟﺠﻬﺎز.
. ﺳﺘﺆدي إﺿﺎﻓﺔ ﻫﺬه اﻟﻌﺒﺎرة إﻟى أﺣﺪ اﻟﻤﻜﻮﻧﺎت debugger  أداة أﺧﺮى ﺿﺮورﻳﺔ ﻫي داﻟﺔ 
إﻟى إﻳﻘﺎف ﻋﺮض اﻟﻤﺘﺼﻔﺢ ﻟﻠﺼﻔﺤﺔ ﻣﺆﻗﺘًﺎ: ﺗﻘﻨﻴﺎت ﻣﺨﺘﻠﻔﺔ ﻳﻤﻜﻨﻚ اﺳﺘﻌﻤﺎﳍﺎ ﻟﺘﻨﻘﻴﺢ اﻷﺧﻄﺎء اﻟﱪﻣﺠﻴﺔ
(Debugging Techniques)
راﺋﻌﺔ ﺣﻘًﺎ ﻷﻧﻪ ﻳﻤﻜﻨﻚ اﻵن اﺳﺘﺨﺪام ﻣﺼﺤﺢ أﺧﻄﺎء اﻟﻤﺘﺼﻔﺢ ﻟﻔﺤﺺ اﻟﻘِﻴﻢ وﺗﺸﻐﻴﻞ 
ﺗﻄﺒﻴﻘﻚ ﺳﻄﺮًا ﺑﺴﻄﺮ واﺣﺪ ﻓي ﻛﻞ ﻣﺮة. 
 ﻟﺘﺼﺤﻴﺢ أﺧﻄﺎء اﻟﺘعﻠﻴﻤﺎت اﻟﺒﺮﻣﺠﻴﺔ Vscode  ﻳﻤﻜﻨﻚ أﻳﻀًﺎ اﺳﺘﺨﺪام اﻟﻤﺼﺤﺢ ﻓي ﺑﺮﻧﺎﻣﺞ 
 ﺗﺸﺮح اﻷﻣﺮ.ﻫﺬه ﻣﻘﺎﻃﻊ ﺗعﻠﻴﻤﻴﺔ ﻣﻦ ﺟﺎﻧﺐ اﻟﺨﺎدوم. 
اﻵن ﺑعﺪ أن أﺻﺒﺢ ﻟﺪﻳﻨﺎ ﻓﻬﻢ ﺟﻴﺪ ﻟﻸدوات اﻟﺘي ﻳﻤﻜﻨﻨﺎ اﺳﺘﺨﺪاﻣﻬﺎ ﻟﻤﺴﺎﻋﺪﺗﻨﺎ ﻓي ﺗﻄﻮﻳﺮ
، دﻋﻨﺎ ﻧﻮاﺻﻞ ﻣﻦ ﺣﻴﺚ ﺗﻮﻗﻔﻨﺎ ﺑﺘﻄﺒﻴﻘﻨﺎ اﻷول: Next.js ﺗﻄﺒﻴﻘﺎت
، وﻓيblog/ ﻋﻨﺪﻣﺎ أرﻳﺪ إﺿﺎﻓﺔ ﺻﻔﺤﺔ ﺛﺎﻧﻴﺔ ﻟﺘﻄﺒﻴﻘﻨﺎ، ﻣﺜﻼ ﺻﻔﺤﺔ ﻋﺮض اﻟﺘﺪوﻳﻨﺎت 
، ﺗﻤﺎﻣًﺎ ﻣﺜﻞ اﻟﻤﻜﻮن pages  اﻟﻮﻗﺖ اﻟﺤﺎﻟي ﺳﻨﻨﺸئ ﺻﻔﺤﺔ ﺛﺎﺑﺘﺔ ﺑﺴﻴﻄﺔ داﺧﻞ ﻣﺠﻠﺪ
:index.js  اﻷول ﻟﺪﻳﻨﺎإﺿﺎﻓﺔ ﺻﻔﺤﺎت ﺛﺎﻧﻴﺔ ﻟﻠﻤﴩوع
 ، إذا ﻗﻤﺖ ﺑﺘﺸﻐﻴﻠﻪ ﺳﺎﺑﻘﺎً ﻓﻼ npm run dev  ﺑعﺪ ﺣﻔﻆ اﻟﻤﻠﻒ اﻟﺠﺪﻳﺪ، ﻧﻨﻔّﺬ اﻷﻣﺮ 
ﺣﺎﺟﺔ ﻹﻋﺎدة ﺗﺸﻐﻴﻠﻪ.
:(Terminal ) ﻻﺣﻆ ﻣﺎ أﺧﺒﺮﺗﻨﺎ ﺑﻪ اﻟﻄﺮﻓﻴﺔ 

.pages   ﻳعﺘﻤﺪ ﻋﻠى اﺳﻢ اﻟﻤﻠﻒ، و ﺗﻤﻮﺿﻌﻪ داﺧﻞ ﻣﺠﻠﺪ blog/ راﺑﻂ اﻟﺼﻔﺤﺔ 
، وﺳﺘﻈﻬﺮ ﺗﻠﻚ اﻟﺼﻔﺤﺔ ﻋﻠى ﺷﻜﻞ ﻋﻨﻮان pages/hey/ho  ﻳﻤﻜﻨﻚ إﻧﺸﺎء ﺻﻔﺤﺔ
 .http://localhost:3000/he y/ho
ﺣﺎول ﺗﺼﻔﺢ اﻟﺼﻔﺤﺔ اﻟﺠﺪﻳﺪ وﻋﺮض ﻣﺼﺪرﻫﺎ، ﻋﻨﺪ ﺗﺤﻤﻴﻠﻬﺎ ﻣﻦ اﻟﺨﺎدوم، ﺳﻴﺘﻢ إدراج 
 ﻛﻮاﺣﺪة ﻣﻦ اﻟﺤﺰم next/static/development/pages/blog.js _/ اﻟﺤﺰﻣﺔ
ﻛﻤﺎ ﻫﻮnext/static/development/pages/index.js _/اﻟﻤﺤﻤﻠﺔ، وﻟﻦ ﺗﺠﺪ
اﻟﺤﺎل ﻓي اﻟﺼﻔﺤﺔ اﻟﺮﺋﻴﺴﺔ. ﻫﺬا ﻷﻧﻪ ﺑﻔﻀﻞ اﻟﺘﻘﺴﻴﻢ اﻟﺘﻠﻘﺎﺋي ﻟﻠﺸﻔﺮة اﻟﺒﺮﻣﺠﻴﺔ، ﻻ 
ﻧﺤﺘﺎج إﻟى اﻟﺤﺰﻣﺔ اﻟﺘي ﺗﺨﺪم اﻟﺼﻔﺤﺔ اﻟﺮﺋﻴﺴﺔ. ﻓﻘﻂ اﻟﺤﺰﻣﺔ اﻟﺘي ﺗﺨﺪم ﺻﻔﺤﺔ اﻟﻤﺪوﻧﺔ. 
:blog.js  ﻳﻤﻜﻨﻨﺎ أﻳﻀًﺎ ﺗﺼﺪﻳﺮ وﻇﻴﻔﺔ ﻣﺠﻬﻮﻟﺔ اﻻﺳﻢ ﻣﻦ 
export default () => (
  <div>
    <h1>Blog</h1>
  </div>
)
:أو إذا ﻛﻨﺖ ﺗﻔﻀﻞ ﺻﻴغﺔ اﻟﻮﻇﻴﻔﺔ اﻟﻌﺎدﻳﺔ
export default function () {
  return (
    <div>
      <h1>Blog</h1>
    </div>
  )
}
 ﺗﻤﻜﻨﻚ ﻣﻦ رﺑﻂ اﻟﺼﻔﺤﺎت ﻣﻊ ﺑعﻀﻬﺎ اﻟﺒعﺾ ﺑﺤﻴﺚ ﺗﻜﻮن Next.js إﺣﺪى ﻣﻤﻴﺰات
أﺳﻬﻞ وﺳﺮﻳعﺔ ﻟﻠﻐﺎﻳﺔ.
 وﻓﻌّﻠﻨﺎDevTool  وﺗﻔﺤّﺼﻨﺎ إﺿﺎﻓﺔ a tags  ﻟﻮ ﻧﺴﺘعﻤﻞ اﻟﻄﺮﻳﻘﺔ اﻟﻘﺪﻳﻤﺔ ﺑﺎﻻﺳﻨﺎد ﻋﺒﺮ
 ﻧﺠﺪ أﻧﻪ ﻗﺎم ﺑﺘﺤﻤﻴﻞ ﺟﻤﻴﻊ اﻟﺤﺰم وﻟﻜﻦ ﻧﺤﻦ ﻟﺴﻨﺎ ﺑﺤﺎﺟﺔ ﻟﺠﻤﻴﻊ ﻫﺬه، PreserLog  زر
، ﻹﺻﻼح ﻫﺬه اﻟﻤﺸﻜﻠﺔ ﺳﻨﺴﺘعﻤﻞ ﻣﻜﺘﺒﺔ ﺗﻮﻓّﺮﻫﺎ blog.js  ﺳﻨﺤﺘﺎج ﻓﻘﻂ إﻟى ﺣﺰﻣﺔ
.Link  ﺗﺪﻋى Next
:ﻧﻘﻮم ﺑﺎﺳﺘﻴﺮادﻫﺎ
import Link from 'next/link'
:، ﻣﺜﻞ ﻫﺬه a tags  ﺛﻢ ﻧﺴﺘﺨﺪﻣﻬﺎ ﺑﺘﻀﻤﻴﻦ
import Link from 'next/link'
const Index = () => (
  <div>
    <h1>Home page </h1>
    <Link href ='/blog'>
      <a>Blog</a>
    </Link>
  </div>
)
export default Indexرﺑﻂ ﺻﻔﺤﺘﲔ ﻣﻊ ﺑﻌﺾ
اﻵن إذا أﻋﺪﻧﺎ ﻣﺤﺎوﻟﺔ ﻓﺤﺺ اﻟﺼﻔﺤﺔ ﻣﺜﻠﻤﺎ ﻓﻌﻠﻨﺎ ﺳﺎﺑﻘًﺎ، ﻓﺴﺘﺘﻤﻜﻦ ﻣﻦ رؤﻳﺔ أن ﺻﻔﺤﺔ 
 ﻳﺘﻢ ﺗﺤﻤﻴﻞ اﻟﺤﺰﻣﺔ اﻟﺨﺎﺻﺔ ﺑﻬﺎ ﻓﻘﻂ: blog.js
ﺗﻢ ﺗﺤﻤﻴﻞ اﻟﺼﻔﺤﺔ ﺑﺸﻜﻞ أﺳﺮع، ﺣﺘى أن أﻳﻘﻮﻧﺔ اﻟﺘﺤﻤﻴﻞ ﺑﺄﻋﻠى ﺻﻔﺤﺔ اﻟﺘﺒﻮﻳﺐ ﻟﻦ
ﺗﻈﻬﺮ.
ﻣﺎذا ﻟﻮ ﺿﻐﻄﺖ اﻵن ﻋﻠى زر اﻟﻌﻮدة؟ ﻟﻦ ﻳﺘﻢ ﺗﺤﻤﻴﻞ أي ﺷيء، ﻷن اﻟﻤﺘﺼﻔﺢ ﻻ ﻳﺰال 
. ﻛﻞ ﺷيء index/، وﺟﺎﻫﺰة ﻟﺘﺤﻤﻴﻞ ﺻﻔﺤﺔ index.js  ﻳﺤﺘﻮي ﻋﻠى اﻟﺤﺰﻣﺔ اﻟﻘﺪﻳﻤﺔ 
ﺗﻠﻘﺎﺋي!
( ﻣﻊ اﻟﻤُﻮﺟّﻪDynamic content) اﻟﻤﺤﺘﻮى اﻟﺘﻔﺎﻋﲇ
 (Router)
رأﻳﻨﺎ ﻓي اﻟﻔﺼﻞ اﻟﺴﺎﺑﻖ ﻛﻴﻔﻴﺔ رﺑﻂ اﻟﺼﻔﺤﺔ اﻟﺮﺋﻴﺴﺔ ﺑﺼﻔﺤﺔ اﻟﻤﺪوﻧﺔ. واﻵن ﻟﻮ أردﻧﺎ 
ﻋﺮض رواﺑﻂ اﻟﺘﺪوﻳﻨﺎت ﺑﺸﻜﻞ دﻳﻨﺎﻣﻴﻜي. ﻋﻠى ﺳﺒﻴﻞ اﻟﻤﺜﺎل، ﻗﺪ ﺗﻜﻮن ﺗﺪوﻳﻨﺔ ﺑعﻨﻮان 
. وﻗﺪ ﺗﻜﻮن ﺗﺪوﻳﻨﺔ ﺛﺎﻧﻴﺔ ﺑعﻨﻮان blog/hello-world / " وراﺑﻄﻬﺎ Hello W orld"
.blog/my-second-post / ""ﻣﺸﺎرﻛﺘي اﻟﺜﺎﻧﻴﺔ 
dynamic ) اﻟﺮواﺑﻂ اﻟﺪﻳﻨﺎﻣﻴﻜﻴﺔ  ﺗﻘﺪﻳﻢ ﻣﺤﺘﻮى دﻳﻨﺎﻣﻴﻜي ﺑﻨﺎءً ﻋﻠى Next.js ﻳﻤﻜﻦ ﻟـ
 .(URL
.[] ﻧﻘﻮم ﺑﺈﻧﺸﺎء راﺑﻂ دﻳﻨﺎﻣﻴﻜي ﻋﻦ ﻃﺮﻳﻖ إﻧﺸﺎء ﺻﻔﺤﺔ دﻳﻨﺎﻣﻴﻜﻴﺔ ﻣﻊ 
. وﻫﺬا اﻟﻤﻠﻒ ﻳﺘعﺎﻣﻞ ﻣﻊ ﻛﻞ اﻟﺮواﺑﻂ pages/blog/[id].js  ﻛﻴﻒ؟ ﺳﻨﻀﻴﻒ ﻣﻠﻒ
، ﻣﺜﻞ ﺗﻠﻚ اﻟﺘي أﺷﺮﻧﺎ إﻟﻴﻬﺎ أﻋﻼه: /blog/ اﻟﺪﻳﻨﺎﻣﻴﻜﻴﺔ ﺗﺤﺖ اﻟﺮاﺑﻂ
 إﻟى آﺧﺮه.blog/hello-world /
 داﺧﻞ اﻷﻗﻮاس اﻟﻤﺮﺑعﺔ وﺗعﻨي أن أي ﺷيء [id] ﻓي اﺳﻢ اﻟﻤﻠﻒ، ﻧﻀﻊ اﻟﻤﻌﺮّف
query ) ﻟﺨﺎﺻﻴﺔ اﻻﺳﺘعﻼم ﻣﻌﻠﻤﺔ  id دﻳﻨﺎﻣﻴﻜي ﻣﺘغﻴّﺮ ﺳﻴﺘﻢ وﺿﻌﻪ داﺧﻞ اﻟﻤﻌﺮّف 
 .(Router ) ﺑﺎﻟﻤُﻮﺟّﻪ اﻟﺨﺎﺻﺔ (property
.ﺣﺴﻨًﺎ، ﻗﺪ ﺗﺤﺪﺛﺖ ﻋﻦ أﺷﻴﺎء ﻛﺜﻴﺮة ﻓي وﻗﺖ واﺣﺪ 
؟(Router ) ﺑﺎﻟﻤُﻮﺟّﻪﻣﺎذا أﻗﺼﺪ 
:next/router  . ﻧﺴﺘﻮردﻫﺎ ﻣﻦ Next.js اﻟﻤﻮﺟﻪ ﻋﺒﺎرة ﻋﻦ ﻣﻜﺘﺒﺔ ﻣﻘﺪﻣﺔ ﻣﻦ 
import { useRouter } from 'next/router'
:، ﺑﺈﻧﺸﺎء ﻣﺜﻴﻞ ﻟﻜﺎﺋﻦ اﻟﻤﻮﺟّﻪ ﺑﺎﺳﺘﺨﺪام useRouter  وﺑﻤﺠﺮد اﻻﻧﺘﻬﺎء ﻣﻦ ذﻟﻚ ﻧعﺮّف 
const router = useRouter ()
.ﺑﻤﺠﺮد أن ﻧعﺮّف ﻛﺎﺋﻦ اﻟﻤﻮﺟّﻪ ﻫﺬا، ﻳﻤﻜﻨﻨﺎ اﺳﺘﺨﺮاج اﻟﻤﻌﻠﻮﻣﺎت ﻣﻨﻪ 
 ﻓي ﻣﻠﻒ URL ﻋﻠى وﺟﻪ اﻟﻤﺜﺎل، ﻳﻤﻜﻨﻨﺎ اﻟﺤﺼﻮل ﻋﻠى اﻟﺠﺰء اﻟﺪﻳﻨﺎﻣﻴﻜي ﻣﻦ ﻋﻨﻮان 
.router.query.id   ﻋﻦ ﻃﺮﻳﻖ اﻟﻮﺻﻮل إﻟﻴﻪ ﻋﺒﺮ js.[id]
، ﻣﺜﻞ URL ﻳﻤﻜﻦ أن ﻳﻜﻮن اﻟﺠﺰء اﻟﺪﻳﻨﺎﻣﻴﻜي أﻳﻀًﺎ ﻣﺠﺮد ﺟﺰء ﻣﻦ ﻋﻨﻮان 
.post-[id].js
.ﻟﺬﻟﻚ دﻋﻮﻧﺎ ﻧﺴﺘﻤﺮ وﻧﻄﺒﻖ ﻛﻞ ﻫﺬه اﻷﺷﻴﺎء ﻋﻤﻠﻴًﺎ
pages/blog/[id].js  ﻗﻢ ﺑﺈﻧﺸﺎء اﻟﻤﻠﻒ ﻋﻠى ﻣﺴﺎر
import { useRouter } from 'next/router'
export default () => {
  const router = useRouter ()
  return (
    <>
      <h1>Blog post </h1>
      <p>Post id: {router.query.id}</p>
    </>
  )
}
: ، ﺳﺘﺮى ﻫﺬه http://localhost:3000/blog/test  اﻵن إذا ﺗﺼﻔّﺤﺖ اﻟﺮاﺑﻂ 
 ﻟﺠﻠﺐ ﺗﺪوﻳﻨﺔ ﻣﻌﻴّﻨﺔ ﻣﻦ ﻗﺎﺋﻤﺔ اﻟﺘﺪوﻳﻨﺎت ﺑﻘﺎﻋﺪة id ﻳﻤﻜﻨﻨﺎ اﺳﺘﺨﺪام اﻟﻤﻌﺮّف
 ﻓي اﻟﻤﺠﻠﺪ posts.json اﻟﺒﻴﺎﻧﺎت، ﻟﺘﺒﺴﻴﻂ اﻷﻣﻮر ﻋﻠى ﺳﺒﻴﻞ اﻟﻤﺜﺎل، ﺳﻨﻀﻴﻒ ﻣﻠﻒ
اﻟﺮﺋﻴﺴي ﻟﻠﻤﺸﺮوع: 
{
  "test": {
    "title": "test post" ,
    "content" : "Hey some post content"
  },
  "second" : {
    "title": "second post" ,
    "content" : "Hey this is the second post content"
  }
}
:id اﻵن ﻳﻤﻜﻨﻨﺎ اﺳﺘﻴﺮاده واﻟﺒﺤﺚ ﻋﻦ اﻟﺘﺪوﻳﻨﺔ ﻣﻦ اﻟﻤﻌﺮّف 
import { useRouter } from 'next/router'
import posts from '../../posts.json'
export default () => {
  const router = useRouter ()
  const post = posts[router.query.id]
  return (
    <>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </>
  )
}
:ﻋﻨﺪ إﻋﺎدة ﺗﺤﻤﻴﻞ اﻟﺼﻔﺤﺔ اﻟﻤﻔﺮوض ﺳﺘﻈﻬﺮ ﻟﻨﺎ ﻫﺬه 
ﻟﻜﻨﻬﺎ ﻟﻴﺴﺖ ﻛﺬﻟﻚ! ﺑﻞ ﺣﺼﻠﻨﺎ ﻋﻠى ﺧﻄﺄ ﻓي وﺣﺪة اﻟﺘﺤﻜﻢ وﺧﻄﺄ ﻓي اﻟﻤﺘﺼﻔﺢ أﻳﻀًﺎ:
ﻟﻤﺎذا؟ ﻷﻧﻪ أﺛﻨﺎء اﻟﻌﺮض، وﻋﻨﺪﻣﺎ ﺗﺘﻢ ﺗﻬﻴﺌﺔ اﻟﻤﻜﻮن، ﻟﻢ ﺗﺠﻬّﺰ اﻟﺒﻴﺎﻧﺎت ﺑعﺪ. ﺳﻨﺮى ﻛﻴﻔﻴﺔ 
 ﻓي اﻟﺪرس اﻟﺘﺎﻟي. getInitialProps  ﺗﻮﻓﻴﺮ اﻟﺒﻴﺎﻧﺎت ﻟﻠﻤﻜﻮن ﺑﺎﺳﺘﺨﺪام
 ﻗﺒﻞ<if (!post) return <p></p  ﻓي اﻟﻮﻗﺖ اﻟﺤﺎﻟي، أﺿﻒ اﻟﻘﻠﻴﻞ ﻣﻦ اﻟﺘﺤﻘﻖ
:JSX إرﺟﺎع
import { useRouter } from 'next/router'
import posts from '../../posts.json'
export default () => {
  const router = useRouter ()
  const post = posts[router.query.id]
  if (!post) return <p></p>
  return (
    <>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </>
  )
}
اﻵن ﻳﺠﺐ أن ﺗعﻤﻞ اﻟﺼﻔﺤﺔ ﺑﺸﻜﻞ ﻋﺎدي. ﻓي اﻟﺒﺪاﻳﺔ ﻳﺘﻢ ﺗﻘﺪﻳﻢ اﻟﻤﻜﻮن ﺑﺪون إﺳﺘعﻼم
 ﺑﺘﺸﻐﻴﻞ ﺗﺤﺪﻳﺚ Next.js . وﺑعﺪ اﻟﺘﻘﺪﻳﻢ، ﻳﻘﻮم router.query.id  ﻋﻦ اﻟﺒﻴﺎﻧﺎت
ﺑﻘﻴﻤﺔ اﻻﺳﺘعﻼم وﺗعﺮض اﻟﺼﻔﺤﺔ اﻟﻤﻌﻠﻮﻣﺎت اﻟﺼﺤﻴﺤﺔ. 
:HTML   ﻓي<p> وإذا ﻋﺮﺿﺖ اﻟﻤﺼﺪر، ﺳﺘﺠﺪ ﻫﺬه اﻟﻌﻼﻣﺔ اﻟﻔﺎرﻏﺔ 
 وﻫﺬا ﻳﺆﺧﺮ أوﻗﺎت SSR ﺳﻨﻘﻮم ﻗﺮﻳﺒًﺎ ﺑﺈﺻﻼح ﻫﺬه اﻟﻤﺸﻜﻠﺔ اﻟﺘي ﺗﻔﺸﻞ ﻓي ﺗﻨﻔﻴﺬ 
اﻟﺘﺤﻤﻴﻞ ﻟﻤﺴﺘﺨﺪﻣﻴﻨﺎ وﺗﺤﺴﻴﻦ ﻣﺤﺮﻛﺎت اﻟﺒﺤﺚ ﻛﻤﺎ ﺗﺤﺪﺛﻨﺎ ﺳﺎﺑﻘﺎً. 
:pages/blog.js  ﻳﻤﻜﻨﻨﺎ إﻛﻤﺎل ﻣﺜﺎل اﻟﻤﺪوﻧﺔ ﺑﺈدراج ﺗﻠﻚ اﻟﺘﺪوﻳﻨﺎت ﻓي 
import posts from '../posts.json'
const Blog = () => (
  <div>
    <h1>Blog</h1>
    <ul>
      {Object.entries(posts).map((value, index) => {
        return <li key={index}>{value[1].title}</li>
      })}
    </ul>
  </div>
)
export default Blog
 ﻣﻨﻬﺎLink  وﻳﻤﻜﻨﻨﺎ رﺑﻄﻬﻢ ﺑﺼﻔﺤﺎت اﻟﺘﺪوﻳﻨﺎت ﻓﺮادى، ﻋﻦ ﻃﺮﻳﻖ إﺳﺘﻴﺮاد ﻣﻜﺘﺒﺔ 
 واﺳﺘﺨﺪاﻣﻬﺎ داﺧﻞ ﺣﻠﻘﺔ اﻟﺘﺪوﻳﻨﺎت: next/link
import Link from 'next/link'
import posts from '../posts.json'
const Blog = () => (
  <div>
    <h1>Blog</h1>
    <ul>
      {Object.entries(posts).map((value, index) => {
        return (
          <li key={index}>
            <Link href ='/blog/[id]'  as={'/blog/'  + value[0]}>
              <a>{value[1].title}</a>
            </Link>
          </li>
        )
      })}
    </ul>
  </div>
)
export default Blog
ﻳﺘعﺎﻣﻞ أﻧﻬﺎ ﺗﺮﺑﻂ اﻟﺼﻔﺤﺎت ﻓﻴﻤﺎ ﺑﻴﻨﻬﺎ، وﻋﻨﺪﻣﺎ ﺗﺴﺘﺨﺪﻣﻪ،  Link  ﺗﺤﺪﺛﻨﺎ ﺳﺎﺑﻘﺎً ﻋﻦ
 ﻟﻨﺎ، ﻟﺬﻟﻚ ﻋﻨﺪﻣﺎ ﻳﻨﻘﺮ اﻟﻤﺴﺘﺨﺪم ﻋﻠىﺑﺸﻔﺎﻓﻴﺔ ﻣﻊ ﺗﻮﺟﻴﻪ ﺻﻔﺤﺎت اﻟﻌﺮض  Next.jsPrefetching اﻟﺘﺤﻀﲑ اﻟﻤُﺴﺒﻖ
اﻟﺮاﺑﻂ، ﺗﻬﺘﻢ اﻟﻮاﺟﻬﺔ اﻷﻣﺎﻣﻴﺔ ﺑﺈﻇﻬﺎر ﺟﺪﻳﺪ اﻟﺼﻔﺤﺔ دون ﺗﺸﻐﻴﻞ ﻃﻠﺐ ﺑﻴﻦ اﻟﻌﻤﻴﻞ 
واﻟﺨﺎدوم ودورة اﺳﺘﺠﺎﺑﺔ ﺟﺪﻳﺪة، ﻛﻤﺎ ﻳﺤﺪث ﻋﺎدةً ﻣﻊ ﺻﻔﺤﺎت اﻟﻮﻳﺐ. 
.Link   ﻋﻨﺪﻣﺎ ﺗﺴﺘﺨﺪم Next.js ﻫﻨﺎك ﺷيء آﺧﺮ ﻳﻘﺪﻣﻪ ﻟﻚ
" )ﻣﻤﺎ ﻳعﻨي أﻧﻪ viewport "  ﻓي اﻟﻌﺮض<Link> ﺑﻤﺠﺮد ﻇﻬﻮر ﻋﻨﺼﺮ ﻣﻀﻤّﻦ ﺑﺪاﺧﻠﻪ 
 اﻟﺬي ﻳﺸﻴﺮ إﻟﻴﻪ ﻣﺴﺒﻘًﺎ، URL  ﺑﺈﻋﺪاد ﻋﻨﻮان Next.js ﻣﺮﺋي ﻟﻤﺴﺘﺨﺪم اﻟﻤﻮﻗﻊ(، ﻳﻘﻮم 
ﻃﺎﻟﻤﺎ أﻧﻪ راﺑﻂ ﻣﺤﻠي )ﻋﻠى ﻣﻮﻗﻊ اﻟﻮﻳﺐ اﻟﺨﺎص ﺑﻚ(، ﻣﻤﺎ ﻳﺠﻌﻞ اﻟﺘﻄﺒﻴﻖ ﺳﺮﻳعًﺎ ﻟﻠﻐﺎﻳﺔ 
ﻟﻠﻤﺸﺎﻫﺪ.
(Production Mode ) وﺿﻊ اﻟﻨﺸﺮ أو اﻹﻧﺘﺎجﻳﺘﻢ ﺗﺸﻐﻴﻞ ﻫﺬا اﻷﺳﻠﻮب ﻓﻘﻂ ﻓي  
)ﺳﻨﺘﺤﺪث ﻋﻦ ﻫﺬا ﺑﺎﻟﺘﻔﺼﻴﻞ ﻻﺣﻘًﺎ(، ﻳعﻨي أﻧﻪ ﻳﺠﺐ ﻋﻠﻴﻚ إﻳﻘﺎف اﻟﺘﻄﺒﻴﻖ إذا ﻛﻨﺖ 
، وﺗﺠﻤﻴﻊ ﺣﺰﻣﺔ اﻹﻧﺘﺎج اﻟﺨﺎﺻﺔ ﺑﻚ npm run dev  ﺗﻘﻮم ﺑﺘﺸﻐﻴﻠﻪ
.npm run start  وﺗﺸﻐﻴﻠﻬﺎ npm run build
، ﺳﺘﻼﺣﻆ أن ﺟﻤﻴﻊ DevTools ( ﻓيNetwork inspector ) ﺑﺎﺳﺘﺨﺪام ﻓﺎﺣﺺ اﻟﺸﺒﻜﺔ
اﻟﺮواﺑﻂ اﻟﻤﻮﺟﻮدة ﻓي اﻟﺠﺰء اﻟﻤﺮﺋي ﻣﻦ اﻟﺼﻔﺤﺔ ﻋﻨﺪ ﺗﺤﻤﻴﻠﻬﺎ ﺳﺘﺒﺪأ ﻓي اﻟﺘﺤﻀﻴﺮ اﻟﻤُﺴﺒﻖ 
ﻋﻠى ﺻﻔﺤﺘﻚ )ﻳﺘﻢ ﺗﺸﻐﻴﻠﻪ ﻋﻨﺪ ﺗﺤﻤﻴﻞ اﻟﺼﻔﺤﺔ load  ﻓﻮرًا ﺑعﺪ ﺗﺸﻐﻴﻞ ﺣﺪث 
(DOMContentLoaded  ﺑﺎﻟﻜﺎﻣﻞ، وﻳﺤﺪث ﺑعﺪ
 أﺧﺮى ﻏﻴﺮ ﻣﻮﺟﻮدة ﻓي اﻟﻌﺮض ﻣﺴﺒﻘًﺎ ﻋﻨﺪﻣﺎ ﻳﻘﻮم Link  ﺳﻴﺘﻢ ﺗﺤﻀﻴﺮ أي ﻋﻼﻣﺔ
اﻟﻤﺴﺘﺨﺪم ﺑﺎﻟﺘﻤﺮﻳﺮ.
 +، ﻣﺎ ﻟﻢ 3g  وWiﬁ ﻳﺘﻢ اﻟﺘﺤﻀﻴﺮ اﻟﻤﺴﺒﻖ ﺗﻠﻘﺎﺋﻴًﺎ ﻓي اﻻﺗﺼﺎﻻت ﻋﺎﻟﻴﺔ اﻟﺴﺮﻋﺔ )اﺗﺼﺎﻻت 
.HTTP Header  ﻣﻊ Save-Data  ﻳﺮﺳﻞ اﻟﻤﺘﺼﻔﺢ اﺳﺘعﻼم 
 ﻋﻦ ﻃﺮﻳﻖ ﺗعﻴﻴﻦ اﻟﺨﺎﺻﻴﺔ Link  ﻳﻤﻜﻨﻚ إﻟﻐﺎء اﻟﺘﺤﻀﻴﺮ اﻟﻤﺴﺒﻖ ﻟﺮواﺑﻂ ﻣﺨﺼّﺼﺔ ﻓي 
:false   ﻛـprefetch
<Link href="/a-link" prefetch ={false}>
  <a>A link</a>
</Link>
 ﻓي ﺗﺤﺪﻳﺪ ﻋﻨﻮان راﺑﻂ Link  ﺗﺘﻤﺜﻞ إﺣﺪى اﻟﻤﻴﺰات اﻟﻤﻬﻤﺔ ﺟﺪًا ﻋﻨﺪ اﻟﻌﻤﻞ ﻣﻊ 
 اﻷﺧﺮى. URL اﻟﺼﻔﺤﺔ اﻟﻨﺸﻄﺔ ﺑﺤﻴﺚ ﻳﻜﻮن ﻣﺨﺘﻠﻔًﺎ ﻋﻦ ﻋﻨﺎوﻳﻦ 
ﻫﺬا ﻣﻔﻴﺪ ﺑﺸﻜﻞ ﺧﺎص ﻓي إذا أردﻧﺎ ﺗﺤﺪﻳﺪ ﻟﻮن ﻣﺨﺼﺺ ﻟﻠﻨﺎﻓﺬة ﻋﻠى ﺳﺒﻴﻞ اﻟﻤﺜﺎل. 
 ﻻ ﺗﻔﻌﻞ ذﻟﻚ ﺗﻠﻘﺎﺋﻴًﺎ. ﻟﺬﻟﻚ ﺳﻨﻨﺸئ ﻣﻜﻮّن ﺧﺎص ﺑﻨﺎ Next.js ﻋﻠىLink  ﻣﻜﺘﺒﺔ
 ﻣﻦuseRouter   وnext/link   ﻣﻦLink  وreact وﻧﺴﺘﺪﻋي ﻛﻞ ﻣﻦ ﻣﻜﺘﺒﺔ
.next/router
href  داﺧﻞ اﻟﻤﻜﻮن، ﻧﺤﺪد ﻣﺎ إذا ﻛﺎن اﺳﻢ اﻟﻤﺴﺎر اﻟﺤﺎﻟي ﻟﻠﺼﻔﺤﺔ ﻳﻄﺎﺑﻖ ﺳﻤﺔ
".وأﺧﻴﺮاً selected " ( ﻣﺜﻼ class ) ﻟﻠﻤﻜﻮن، ﻓﺈن ﻛﺎن اﻷﻣﺮ ﻛﺬﻟﻚ، ﺳﻨﺨﺒﺮه ﺑﺈرﻓﺎق ﺻﻨﻒ 
.)(React.cloneElement  ﻧعﻴﺪﻫﻢ ﻋﺒﺮ
import React from 'react'
import Link from 'next/link'
import { useRouter } from 'next/router'
export default ({ href, children }) => {
  const router = useRouter ()
  let className = children .props.className || ''
  if (router.pathname === href) {
    className = `${className } selected `
  }
  return <Link href ={href}>{React.cloneElement (children , { className })}</
}Active)  ﻟﺘﺤﺪﻳﺪ اﻟﺼﻔﺤﺔ اﻟﻨَﺸِﻄﺔRouter اﺳﺘﺨﺪام اﻟﻤُﻮﺟّﻪ
(Link
next/router اﺳﺘﺨﺪام
. وﻣﻦ Next.js  ﻹدارة اﻟﺘﻮﺟﻴﻪ ﻓي ﺗﻄﺒﻴﻘﺎت Link  ﻟﻘﺪ رأﻳﻨﺎ ﺑﺎﻟﻔﻌﻞ ﻛﻴﻔﻴﺔ اﺳﺘﺨﺪام 
، وﻟﻜﻦ ﻓي ﺑعﺾ اﻷﺣﻴﺎن ﺗﺤﺘﺎج إﻟى إﺟﺮاء ﺗغﻴﻴﺮ ﻓي اﻟﺘﻮﺟﻴﻪ JSX اﻟﺴﻬﻞ إدارة اﻟﻤﻮﺟّﻪ ﻓي 
ﺑﺮﻣﺠﻴًﺎ.
 ﻣﺒﺎﺷﺮةً، اﻟﻤﺘﻮﻓﺮ ﻓي ﺣﺰﻣﺔ Next.js ﻓي ﻫﺬه اﻟﺤﺎﻟﺔ، ﻳﻤﻜﻨﻚ اﻟﻮﺻﻮل إﻟى اﻟﻤﻮﺟّﻪ
.)(push  ، واﺳﺘﺪﻋﺎء next/router
:ﻓﻴﻤﺎ ﻳﻠي ﻣﺜﺎل ﻋﻠى اﻟﻮﺻﻮل إﻟى اﻟﻤﻮﺟّﻪ
import { useRouter } from 'next/router'
export default () => {
  const router = useRouter ()
  //...
}
. ﻳﻤﻜﻨﻨﺎ إﺳﺘﺨﺪاﻣﻪ اﻵن)( useRouter  ﺑعﺪ ﺗعﺮﻳﻒ ﻛﺎﺋﻦ اﻟﻤﻮﺟّﻪ
ﻫﺬا اﻟﻤﻮّﺟﻪ ﻳعﻤﻞ ﻣﻦ ﺟﻬﺔ اﻟﻤﺴﺘﺨﺪم ﻓﻘﻂ أو اﻟﻮاﺟﻬﺔ اﻷﻣﺎﻣﻴﺔ، أﺳﻬﻞ ﻃﺮﻳﻘﺔ ﻟﻠﺘﺄﻛﺪ 
، أو)(useEffect  ﻣﻦ ذﻟﻚ ﻫي ﺗﻀﻤﻴﻨﻪ داﺧﻞ اﻟﺨﻄﺎف
 ﻓي اﻷﺳﻠﻮب اﻟﻘﺪﻳﻢ.)( componentDidMount
. ﻓي أﻏﻠﺐ اﻷﺣﻴﺎن)( prefetch   و)(push  ﻣﻦ اﻟﻤﺤﺘﻤﻞ أﻧﻚ ﺗﺴﺘﺨﺪم
 ﺗﺴﻤﺢ ﻟﻨﺎ ﺑﺘغﻴﻴﺮ اﻟﺮاﺑﻂ ﺑﺮﻣﺠﻴﺎً. )(push
router.push('/login' )
 ﻳﺴﻤﺢ ﻟﻨﺎ ﺑﺎﻟﺘﺤﻀﻴﺮ اﻟﻤﺴﺒﻖ ﻟﻠﻌﻨﻮان، وﻫﻮ ﻣﻔﻴﺪ ﻋﻨﺪﻣﺎ ﻻ ﻳﻜﻮن ﻟﺪﻳﻨﺎ)( prefetch
:prefetching   اﻟﺬي ﻳﺘعﺎﻣﻞ ﺗﻠﻘﺎﺋﻴﺎً ﻣﻊ Link tag  وﺳﻢ
router.prefetch ('/login' )
:ﻣﺜﺎل ﻛﺎﻣﻞ
import { useRouter } from 'next/router'
export default () => {
  const router = useRouter ()
  useEffect (() => {
    router .prefetch ('/login' )
  })
}
route change  ) أﺣﺪاث ﺗغﻴﻴﺮ اﻟﻤﺴﺎرﻳﻤﻜﻨﻚ أﻳﻀًﺎ اﺳﺘﺨﺪام اﻟﻤﻮﺟّﻪ ﻟﻼﺳﺘﻤﺎع إﻟى  
 .(events
 وﻟﻜﻦ ﻇﻬﺮت ﻟﻨﺎ ﻣﺸﻜﻠﺔ json ﻓي اﻟﻤﺮة اﻟﻤﺎﺿﻴﺔ رأﻳﻨﺎ ﻛﻴﻒ اﺳﺘﻠﻤﻨﺎ اﻟﺒﻴﺎﻧﺎت ﻣﻦ ﻣﻠﻒ 
.undeﬁned
import { useRouter } from 'next/router'
import posts from '../../posts.json'
export default () => {
  const router = useRouter ()
  const post = posts[router.query.id]
  return (
    <>
      <h1>{post.title}</h1>
      <p>{post.content}</p>
    </>
  )
}
:اﻟﺨﻄﺄ)(getInitialProps اﺳﺘﻌﻼم اﻟﺒﻴﺎﻧﺎت ﻋﱪ
 ﻳعﻤﻞ ﺑﻄﺮﻳﻘﺔ ﺗﻠﻘﺎﺋﻴﺔ؟ SSR ﻛﻴﻒ ﻳﻤﻜﻨﻨﺎ ﺣﻞ ﻫﺬا؟ وﻛﻴﻒ ﻧﺠﻌﻞ
( ﺑﺎﺳﺘﺨﺪام داﻟﺔ ﺧﺎﺻﺔ ﺗﺴﻤى props) ﻳﺠﺐ ﻋﻠﻴﻨﺎ ﺗﺰوﻳﺪ اﻟﻤﻜﻮّن ﺑﺨﺼﺎﺋﺺ 
 ﺗﺮﻓﻖ ﺑﺎﻟﻤﻜﻮن. )(getInitialProps
:ﻟﻠﻘﻴﺎم ﺑﺬﻟﻚ، ﻧﻘﻮم أوﻻً ﺑﺘﺴﻤﻴﺔ اﻟﻤﻜﻮن 
const Post = () => {  //...}export default Post
:ﺛﻢ ﻧﻀﻴﻒ اﻟﻮﻇﻴﻔﺔ إﻟﻴﻬﺎ
const Post = () => {  //...}Post.getInitialProps = () => {  //...}export d
.ﺗﺤﺼﻞ ﻫﺬه اﻟﺪاﻟﺔ ﻋﻠى ﻛﺎﺋﻦ ﻛﻮﺳﻴﻂ ﻟﻬﺎ، واﻟﺘي ﺗﺤﺘﻮي ﻋﻠى اﻟﻌﺪﻳﺪ ﻣﻦ اﻟﺨﺼﺎﺋﺺ
 اﻟﻜﺎﺋﻦ، اﻟﺬي اﺳﺘﺨﺪﻣﻨﺎه ﺳﺎﺑﻘًﺎ query  اﻟﺸيء اﻟﺬي ﻧﻬﺘﻢ ﺑﻪ اﻵن ﻫﻮ أﻧﻨﺎ ﻧﺤﺼﻞ ﻋﻠى
ﻟﻠﺤﺼﻮل ﻋﻠى ﻣﻌﺮّف اﻟﺘﺪوﻳﻨﺔ. 
destructuring ) ﻟﺬﻟﻚ ﻳﻤﻜﻨﻨﺎ اﻟﺤﺼﻮل ﻋﻠﻴﻪ ﺑﺎﺳﺘﺨﺪام ﺑﻨﺎء ﺟﻤﻠﺔ ﺗﻔﻜﻴﻚ اﻟﺒﻨﻴﺔ
( :syntax
Post.getInitialProps  = ({ query }) => {  //...}
:اﻵن ﻳﻤﻜﻨﻨﺎ إﻋﺎدة اﻟﺘﺪوﻳﻨﺔ ﻣﻦ ﻫﺬه اﻟﻮﻇﻴﻔﺔ
Post.getInitialProps  = ({ query }) => {  return {    post: posts[query.id]
، وﻧﺤﺼﻞ ﻋﻠى اﻟﺘﺪوﻳﻨﺔ ﻣﻦ ﺧﺎﺻﻴﺔ useRouter  وﻳﻤﻜﻨﻨﺎ أﻳﻀًﺎ إزاﻟﺔ اﺳﺘﻴﺮاد 
:Post  اﻟﺘي ﺗﻢ ﺗﻤﺮﻳﺮﻫﺎ إﻟى اﻟﻤﻜﻮّن props
import posts from '../../posts.json'
const Post = props => {
  return (
    <div>
      <h1>{props.post.title}</h1>
      <p>{props.post.content}</p>
    </div>
  )
}
Post.getInitialProps  = ({ query }) => {
  return {
    post: posts[query.id]
  }
}
export default Post
 ﻛﻤﺎ ﻫﻮ ﻣﺘﻮﻗﻊ، ﻛﻤﺎ ﺗﺮى ﻋﻨﺪ اﻟﺘﺤﻘﻖ ﻣﻦ ﻋﺮض SSR اﻵن ﻟﻦ ﻳﻜﻮن ﻫﻨﺎك ﺧﻄﺄ، وﺳﻴعﻤﻞ
ﻣﺼﺪر اﻟﺼﻔﺤﺔ:
 ﻟﻼﻧﺘﻘﺎل إﻟى ﺻﻔﺤﺔ ﺟﺪﻳﺪة، ﺳﻴﺘﻢ ﺗﻨﻔﻴﺬ داﻟﺔ Link  ﻋﻨﺪﻣﺎ ﻧﺴﺘﺨﺪم
 ﻣﻦ ﺟﺎﻧﺐ اﻟﺨﺎدوم وﻣﻦ ﺟﺎﻧﺐ اﻟﻤﺴﺘﺨﺪم. getInitialPr ops
getInitialProps  ، ﺗﺤﺼﻞ داﻟﺔ query  ﻣﻦ اﻟﻤﻬﻢ ﻣﻼﺣﻈﺔ أﻧﻪ ﺑﺎﻹﺿﺎﻓﺔ إﻟى ﻛﺎﺋﻦ
أﻳﻀًﺎ ﻋﻠى اﻟﺨﺼﺎﺋﺺ اﻷﺧﺮى اﻟﺘﺎﻟﻴﺔ: 
 ﻣﻦ اﻟﺮاﺑﻂ.path  : ﻟـpathname
.: ﺗﻈﻬﺮ ﻋﻨﻮان اﻟﺮاﺑﻂ اﻟﺤﺎﻟي )ﺑﻤﺎ ﻓي ذﻟﻚ اﻻﺳﺘعﻼم( ﺑﺎﻟﻤﺘﺼﻔﺢ asPath
:، ﺗﻜﻮن اﻟﻨﺘﺎﺋﺞ ﻛﺎﻟﺘﺎﻟي http://localhost:3000/blog/test  ﻓي ﺣﺎﻟﺔ اﺳﺘﺪﻋﺎء
blog/[id] /
blog/test /
:وﻓي ﺣﺎﻟﺔ اﻟﻌﺮض ﻣﻦ ﺟﺎﻧﺐ اﻟﺨﺎدوم، ﺳﻴﺘﻠﻘى أﻳﻀًﺎ 
.HTTP : ﻛﺎﺋﻦ اﻟﻄﻠﺐ req
.HTTP : ﻛﺎﺋﻦ اﻹﺳﺘﺠﺎﺑﺔ res
.: ﻛﺎﺋﻦ اﻟﺨﻄﺄ err
. ﻣﺄﻟﻮﻓﺔ ﻟﻚ res  وreq  ﺳﺎﺑﻘﺎً، ﻓﺴﺘﻜﻮن Node.js  إذا ﻛﻨﺖ ﻗﺪ أﻛﻤﻠﺖ ﺗعﻠّﻢ
؟Next.js ﻛﻴﻒ ﻳﻤﻜﻨﻨﺎ ﺗﻨﺴﻴﻖ اﻟﻤﻜﻮّﻧﺎت ﻓي 
 ﻳﺄﺗي ﻣﺪﻣﺠًﺎ ﺑـ Next.js ﻟﺪﻳﻨﺎ اﻟﻜﺜﻴﺮ ﻣﻦ اﻟﺤﺮّﻳﺔ أو اﻟﻤﻜﺘﺒﺎت اﻟﺘي ﻧﻔﻀﻠﻬﺎ. ﻟﻜﻦ 
.Next.js ، ﻷن ﻫﺬه ﻣﻜﺘﺒﺔ أﻧﺸﺄﻫﺎ ﻧﻔﺲ اﻷﺷﺨﺎص اﻟﺬﻳﻦ ﻳعﻤﻠﻮن ﻋﻠى styled-jsx
.وﻫي ﻣﻜﺘﺒﺔ راﺋﻌﺔ ﻷﻧﻬﺎ ﺗﻮﻓّﺮ ﻟﻨﺎ ﺻﻴﺎﻧﺔ ﺳﻬﻠﺔ وﻻ ﺗﺆﺛّﺮ إﻻ ﻋﻠى اﻟﻤﻜﻮّن اﻟﺬي ﺗﻢ ﺗﻨﺴﻴﻘﻪ 
 دون اﻟﺤﺎﺟﺔ إﻟى اﺳﺘﻴﺮاد ﻣﻜﺘﺒﺎت أﺧﺮى أو ﻣﻌﺎﻟﺠﺎت CSS أﻋﺘﻘﺪ أن ﻫﺬا ﻧﻬﺞ ﺟﻴﺪ ﻟﻜﺘﺎﺑﺔ
ﺛﺎﻧﻴﺔ ﺗﺰﻳﺪﻫﺎ ﺗعﻘﻴﺪاً.
، واﻟﺬي JSX ، ﻧﻘﻮم ﺑﺘﻀﻤﻴﻨﻪ داﺧﻞ وﺳﻢ ﻓي Next.js  ﻓيReact   إﻟى ﻣﻜﻮن CSS ﻹﺿﺎﻓﺔ
ﻳﺒﺪأ ﺑـ:
<style jsx >{`
:وﻳﻨﺘﻬي ﺑـ
`}</style>
:css.  ﻋﺎدي، ﺗﻤﺎﻣًﺎ ﻛﻤﺎ ﻧﻔﻌﻞ ﻓي ﻣﻠﻒ CSS داﺧﻞ ﻫﺬه اﻟﺸﻔﺮة اﻟﻐﺮﻳﺒﺔ، ﻧﻜﺘﺐ ﺗﻨﺴﻴﻖ 
<style jsx >{`  h1 {    font-size: 3rem;  } `}</style>
:ﻓﺘﺼﻴﺮCSS اﻟﺘﻨﺴﻴﻖ ﻋﱪ
const Index = () => (
  <div>
<h1>Home page </h1>
<style jsx >{`
  h1 {
    font-size: 3rem;
  }
`}</style>
  </div>
)
export default Index
، ﻳﻤﻜﻨﻨﺎ اﺳﺘﺨﺪام ﺗﻀﻤﻴﻦ ﺧﺼﺎﺋﺺ داﺧﻠﻬﺎ ﻟﺘغﻴﻴﺮ اﻟﻘﻴﻤﺔ دﻳﻨﺎﻣﻴﻜﻴًﺎ. ﻋﻠى block  داﺧﻞ
 وﻳﺴﺘﺨﺪﻣﻪ ﻓي ﻛﺘﻠﺔ size  ﺳﺒﻴﻞ اﻟﻤﺜﺎل، ﻧﻔﺘﺮض ﻫﻨﺎ أن اﻟﻤﻜﻮن اﻟﺮﺋﻴﺴي ﻳﻤﺮر ﺧﺎﺻﻴﺔ 
:style-jsx
const Index = props => (
  <div>
<h1>Home page </h1>
<style jsx >{`
  h1 {
    font-size: ${props.size}rem;
  }
`}</style>
  </div>
)
 ﻛﻌﺎﻣﺔ ﻟﺠﻤﻴﻊ اﻟﻤﻜﻮّﻧﺎت، ﻓﺒﺪﻻً ﻣﻦ CSS إذا ﻛﻨﺖ ﺗﺮﻏﺐ ﻓي ﺗﻄﺒﻴﻖ ﺑعﺾ ﺗﻨﺴﻴﻘﺎت 
:style   إﻟىglobal  ﺗﻘﻴﻴﺪﻫﺎ أو ﺗﻜﺮارﻫﺎ، ﻳﻤﻜﻨﻚ إﺿﺎﻓﺔ اﻟﻜﻠﻤﺔ اﻷﺳﺎﺳﻴﺔ 
<style jsx global>{`
body {
  margin: 0;
}
`}</style>
: ﻓﻘﻢ ﺑﺎﺳﺘﺪﻋﺎﺋﻬﺎ ﻣﺒﺎﺷﺮة Next.js  ﺧﺎرﺟي ﻓي ﻣﻜﻮن CSS إذا ﻛﻨﺖ ﺗﺮﻳﺪ اﺳﺘﻴﺮاد ﻣﻠﻒ 
import '../style.css'
(title) ( ﻣﺜﻞ ﻋﻨﻮان اﻟﺼﻔﺤﺔ head tags )  ﻳﻤﻜﻨﻚ إﺿﺎﻓﺔ وُﺳﻮم ﻣﺨﺼّﺼﺔ Next.js ﻓي
( إﻟى آﺧﺮه. description ) ووﺻﻒ اﻟﺼﻔﺤﺔ
ﻛﻴﻒ ﻳﻤﻜﻨﻚ ﻓﻌﻞ ذﻟﻚ؟
 وإدراﺟﻪ ﻓي اﻟﻤﻜﻮن next/head   اﻟﻤﻮﺟﻮد ﺑـ Head  داﺧﻞ ﻛﻞ ﻣﻜﻮن ﻳﻤﻜﻨﻚ اﺳﺘﻴﺮاد
 اﻟﺨﺎص ﺑﻚ: JSX
import Head from 'next/head'
const House = props => (
  <div>
    <Head>
      <title>The page title </title>
    </Head>
    {/* the rest of the JSX */ }
  </div>
)
export default House
.<head>  ﺗﺮﻳﺪ أن ﺗﻈﻬﺮ ﻓي ﻗﺴﻢ اﻟﺼﻔﺤﺔ HTML  ﻳﻤﻜﻨﻚ إﺿﺎﻓﺔ أي ﻋﻼﻣﺔ
. ﻧﻔﺲHead   إﺿﺎﻓﺔ اﻟﻌﻼﻣﺎت اﻟﻤﻮﺟﻮدة ﻓي إﻟى Next.js ﻋﻨﺪ ﺗﺜﺒﻴﺖ اﻟﻤﻜﻮن، ﺳﻴﻀﻤﻦ
 ﺑﺈزاﻟﺔ ﺗﻠﻚ اﻟﻌﻼﻣﺎت. Next.js اﻟﺸيء ﻋﻨﺪ إﻟﻐﺎءﻫﺎ، ﺳﻴﻬﺘﻢ
 ..إﻟى آﺧﺮه. sidebar   وnav ﻋﻨﺪ ﺗﺼﻤﻴﻢ اﻟﺼﻔﺤﺔ، ﻋﺎدة ﻟﺪﻳﻨﺎ ﻣﻜﻮﻧﺎت ﻣﺨﺘﻠﻔﺔ ﻣﺜﻞHead اﺳﺘﺨﺪام وُﺳﻮم ﻣﺨﺼّﺼﺔ داﺧﻞ
(Wrapper Component) ﺗﺼﻤﻴﻢ وﺗﻐﻠﻴﻒ ﻣﻜﻮّﻧﺎت اﻟﺼﻔﺤﺔ
؟Next.js ﻓﻜﻴﻒ ﺗﺒﻨي ﻣﺜﻞ ﻫﺬا اﻟﻨﻈﺎم ﻓي
Higher Or der ) اﻟﻤﻜﻮﻧﺎت ذات اﻟﺘﺮﺗﻴﺐ اﻷﻋﻠى ﻫﻨﺎك ﻃﺮﻳﻘﺘﺎن. أﺣﺪﻫﻤﺎ ﻳﺴﺘﺨﺪم 
:components/Layout.js  ، ﻋﻦ ﻃﺮﻳﻖ إﻧﺸﺎء ﻣﻜﻮن( Component
export default Page => {
  return () => (
    <div>
      <nav>
        <ul>....</ul>
      </hav>
      <main>
        <Page />
      </main>
    </div>
  )
}
ﻫﻨﺎ، ﻳﻤﻜﻨﻨﺎ اﺳﺘﻴﺮاد ﻣﻜﻮﻧﺎت ﻣﻨﻔﺼﻠﺔ ﻟﻠﻌﻨﻮان أو اﻟﺸﺮﻳﻂ اﻟﺠﺎﻧﺒﻲ، وﻳﻤﻜﻨﻨﺎ أﻳﻀًﺎ إﺿﺎﻓﺔ 
 اﻟﺘي ﻧﺤﺘﺎﺟﻬﺎ. CSS ﺟﻤﻴﻊ ﺗﻨﺴﻴﻘﺎت
وﻳﻤﻜﻨﻚ اﺳﺘﺨﺪاﻣﻪ ﻓي ﻛﻞ ﺻﻔﺤﺔ ﻣﺜﻞ ﻫﺬا:
import withLayout from '../components/Layout.js'
const Page = () => <p>Here's a page !</p>
export default withLayout (Page)
ﻟﻜﻨﻨي وﺟﺪت أن ﻫﺬا ﻳﻨﻄﺒﻖ ﻓﻘﻂ ﻋﻠى اﻟﺤﺎﻻت اﻟﺒﺴﻴﻄﺔ، وﻻ ﺗﺤﺘﺎج إﻟى اﺳﺘﺪﻋﺎء
 ﻋﻠى اﻟﺼﻔﺤﺔ.)( getInitialProps
ﻟﻤﺎذا؟
 ﻓي ﻣﻜﻮﻧﺎت اﻟﺼﻔﺤﺔ ﻓﻘﻂ. وﻣﻊ ذﻟﻚ، إذا)( getInitialProps  ﻷﻧﻪ ﻳﺘﻢ اﺳﺘﺪﻋﺎء
 ﻣﻦ اﻟﺼﻔﺤﺔ، ﻓﻠﻦ ﻳﺘﻢ)( withLayout  ﻗﻤﻨﺎ ﺑﺘﺼﺪﻳﺮ اﻟﻤﻜﻮﻧﺎت ذات اﻟﺘﺮﺗﻴﺐ اﻷﻋﻠى ﻟـ 
 وﺳﺘﺼﺒﺢ)( Page.getInitialProps  اﺳﺘﺪﻋﺎء
.)(withLayout.getInitialProps
ﻣﻦ أﺟﻞ ﺗﺠﻨﺐ اﻟﺘعﻘﻴﺪ ﻏﻴﺮ اﻟﻀﺮوري ﻟﺸﻔﺮاﺗﻨﺎ اﻟﺒﺮﻣﺠﻴﺔ، ﻓﺈن اﻟﺒﺪﻳﻞ ﻫﻮ اﺳﺘﺨﺪام 
(:props) اﻟﺨﺼﺎﺋﺺ
export default props => (
  <div>
    <nav>
      <ul>....</ul>
    </hav>
    <main>
      {props.content}
    </main>
  </div>
)
:وﻓي ﺻﻔﺤﺎﺗﻨﺎ ﻧﺴﺘﺨﺪﻣﻬﺎ اﻵن ﻋﻠى اﻟﻨﺤﻮ اﻟﺘﺎﻟي
import Layout from '../components/Layout.js'
const Page = () => (
  <Layout content ={(
    <p>Here's a page !</p>
  )} />
)
 ﻣﻦ ﻣﻜﻮن اﻟﺼﻔﺤﺔ،)( getInitialProps  ﺗﺴﻤﺢ ﻟﻨﺎ ﻫﺬه اﻟﻄﺮﻳﻘﺔ ﺑﺎﺳﺘﺨﺪام
:content   ﻓي ﺧﺎﺻﻴﺔ JSX واﻟﻌﻴﺐ اﻟﻮﺣﻴﺪ ﻫﻮ أﻧﻪ ﻳﺠﺐ ﻛﺘﺎﺑﺔ اﻟﻤﻜﻮن
import Layout from '../components/Layout.js'
const Page = () => (
  <Layout content ={(
    <p>Here's a page !</p>
  )} />
)
Page.getInitialProps  = ({ query }) => {
  //...
}
، ﻣﻤﺎ ﻳعﻨي أن اﻟﺼﻔﺤﺎت ﻳﺘﻢ( Page Routes ) ﻣﺴﺎرات اﻟﺼﻔﺤﺎت ﺑﺎﻹﺿﺎﻓﺔ إﻟى إﻧﺸﺎء 
.API  أﻳﻀًﺎ إﻧﺸﺎء ﻣﺴﺎرات Next.js ﺗﻘﺪﻳﻤﻬﺎ إﻟى اﻟﻤﺘﺼﻔﺢ ﻛﺼﻔﺤﺎت وﻳﺐ، ﻳﻤﻜﻦ ﻟـ
 ﻹﻧﺸﺎء واﺟﻬﺔ أﻣﺎﻣﻴﺔ Next.js ﻫﺬه ﻣﻴﺰة ﻣﺜﻴﺮة ﻟﻠﻐﺎﻳﺔ ﻷﻧﻬﺎ ﺗعﻨي أﻧﻪ ﻳﻤﻜﻦ اﺳﺘﺨﺪام 
 ﻣﻦ ﺧﻼل JSON   ﻧﻔﺴﻬﺎ، وﻹرﺳﺎل Next.js ﻟﻠﺒﻴﺎﻧﺎت اﻟﻤﺨﺰﻧﺔ واﻟﻤﺴﺘﺮﺟﻌﺔ ﺑﻮاﺳﻄﺔ 
.get ﻃﻠﺒﺎت
.api/  وﻳﺘﻢ ﺗعﻴﻴﻨﻬﺎ ﻧﻘﻄﺔ ﻧﻬﺎﻳﺔ/ pages/api /  ﺿﻤﻦ اﻟﻤﺠﻠﺪ API ﺗﺠﺪ ﺗﻮﺟﻴﻬﺎت
ﻫﺬه اﻟﻤﻴﺰة ﻣﻔﻴﺪة ﻟﻠﻐﺎﻳﺔ ﻋﻨﺪ ﺗﻄﻮﻳﺮ اﻟﺘﻄﺒﻴﻘﺎت. 
(. أﻧﺖ ﺗﻨﺘﻘﻞ ﻣﻦ اﻟﻮاﺟﻬﺔ React   )وﻟﻴﺲ ﻛﻮد Node.js  ﻓي ﻫﺬه اﻟﻤﺴﺎرات، ﻛﺘﺒﻨﺎ ﻛﻮد 
اﻷﻣﺎﻣﻴﺔ إﻟى اﻟﺨﻠﻔﻴﺔ، وﻟﻜﻦ ﺑﺴﻼﺳﺔ ﺗﺎﻣﺔ.
ﻳﺘﻤﺜﻞ ﻫﺪﻓﻪ ﻓي إرﺟﺎع pages/api/comments.js /ﻟﻨﻔﺘﺮض أن ﻟﺪﻳﻚ ﻣﻠﻔًﺎ 
.JSON  ﺗعﻠﻴﻘﺎت ﺗﺪوﻳﻨﺔ ﺑﺘﻨﺴﻴﻖ
:comments.json ﻟﻨﻔﺘﺮض أن ﻟﺪﻳﻚ ﻗﺎﺋﻤﺔ ﺑﺎﻟﺘعﻠﻴﻘﺎت ﻣﺨﺰﻧﺔ ﻓي ﻣﻠﻒ 
[
  {
    "comment" : "First"
  },
  {
    "comment" : "Nice post"
  }
]
:إﻟﻴﻚ ﻧﻤﻮذج اﻟﺘعﻠﻴﻤﺎت اﻟﺒﺮﻣﺠﻴﺔ، واﻟﺬي ﻳعﻮد إﻟى اﻟﻤﺴﺘﺨﺪم ﺑﻘﺎﺋﻤﺔ اﻟﺘعﻠﻴﻘﺎت API ﻣﺴﺎرات
import comments from './comments.json'
export default (req, res) => {
  res.status(200).json(comments )
}
( ﺑﻪcalling ) ، وﻳﻤﻜﻨﻚ ﻣﺤﺎوﻟﺔ ﻣﻨﺎداﺗﻪ api/comments / ﺳﻴﺴﺘﻤﻊ إﻟى اﻟﺮاﺑﻂ
ﺑﺎﺳﺘﺨﺪام ﻣﺘﺼﻔﺤﻚ:
 ﻣﺜﻞ اﻟﺼﻔﺤﺎت، واﺳﺘﺨﺪاماﻟﺘﻮﺟﻴﻪ اﻟﺪﻳﻨﺎﻣﻴﻜي  أﻳﻀًﺎ اﺳﺘﺨﺪام API ﻳﻤﻜﻦ ﻟﻤﺴﺎرات
 دﻳﻨﺎﻣﻴﻜي، ﻣﺜﻞ API ﻹﻧﺸﺎء ﻣﺴﺎر [] اﻟﺒﻨﻴﺔ
اﻟﺬي ﺳﻴﺴﺘﺮد اﻟﺘعﻠﻴﻘﺎت اﻟﺨﺎﺻﺔ ﺑﻤﻌﺮف pages/api/comments/[id].js /
.اﻟﺘﺪوﻳﻨﺔ
ﻣﻦ ﺧﻼل اﻟﺒﺤﺚ ﻋﻨﻬﺎ داﺧﻞ اﻟﻜﺎﺋﻦ id ﻳﻤﻜﻨﻚ اﺳﺘﺮداد اﻟﻘﻴﻤﺔ js.[id] ﻓي اﻟﺪاﺧﻞ،
:req.query
import comments from '../comments.json'
export default (req, res) => {
  res.status(200).json({ post: req.query.id, comments })
}
:ﻫﻨﺎ، ﻳﻤﻜﻨﻚ أن ﺗﺮى أن ﻧﺘﻴﺠﺔ اﻟﺸﻔﺮة أﻋﻼه 
،next/router  ﻣﻦuseRouter  ﻓي اﻟﺼﻔﺤﺎت اﻟﺪﻳﻨﺎﻣﻴﻜﻴﺔ، ﺳﺘﺤﺘﺎج إﻟى اﺳﺘﻴﺮاد
، وﻣﻦ)(const router = useRouter  ﺛﻢ اﻟﺤﺼﻮل ﻋﻠى ﻛﺎﺋﻦ اﻟﻤﻮﺟّﻪ ﺑﺎﺳﺘﺨﺪام 
.router.query.id  ﺑﺎﺳﺘﺨﺪام id ﺛﻢ ﺳﻨﺘﻤﻜﻦ ﻣﻦ اﻟﺤﺼﻮل ﻋﻠى اﻟﻘﻴﻤﺔ
ﻓي ﺟﺎﻧﺐ اﻟﺨﺎدوم، ﻳﻜﻮن اﻷﻣﺮ أﺳﻬﻞ، ﺣﻴﺚ ﻳﺘﻢ إرﻓﺎق اﻻﺳﺘعﻼم ﺑﻜﺎﺋﻦ اﻟﻄﻠﺐ. 
، ﻓﺈن ﺟﻤﻴﻊ اﻟﻄﻠﺒﺎت ﺗعﻤﻞ ﺑﻨﻔﺲ اﻟﻄﺮﻳﻘﺔ - ﻳﺘﻢ ﺗﻨﻔﻴﺬ POST  إذا ﻗﻤﺖ ﺑﺘﻨﻔﻴﺬ ﻃﻠﺐ
ﺟﻤﻴﻊ اﻟﻌﻤﻠﻴﺎت ﻣﻦ ﺧﻼل ﻫﺬا اﻟﺘﺼﺪﻳﺮ اﻻﻓﺘﺮاﺿي.
(، اﺑﺤﺚ ﻋﻦ اﻟﻘﻴﻤﺔ PUT ،DELETE )  اﻷﺧﺮى HTTP  وﻃﺮقGET  ﻋﻦPOST  ﻟﻔﺼﻞ
:req.method
export default (req, res) => {
  switch (req.method) {
    case 'GET':
      //...
      break
    case 'POST':
      //...
      break
    default:
      res .status(405).end() //Method Not Allowed
      break
  }
}
 اﻟﺬي رأﻳﻨﺎه ﺑﺎﻟﻔﻌﻞ، ﻳﻤﻜﻨﻨﺎ أﻳﻀًﺎ اﻟﻮﺻﻮل إﻟى req.method   وreq.query  ﺑﺎﻹﺿﺎﻓﺔ إﻟى
 )ﻧﺺ اﻟﻄﻠﺐ ﻓي req.cookies  ﻣﻠﻔﺎت ﺗعﺮﻳﻒ اﻻرﺗﺒﺎط ﻣﻦ ﺧﻼل اﻟﺮﺟﻮع إﻟى 
(.req.body
، وﻫي ﻣﻜﺘﺒﺔ ﺗعﻤﻞ ﻋﻠى ﺗﺸﻐﻴﻞ Micro ﻓي اﻟﻜﻮاﻟﻴﺲ، ﻳﺘﻢ ﺗﺸﻐﻴﻞ ﻛﻞ ﻫﺬا ﺑﻮاﺳﻄﺔ
.Next.js  ﻏﻴﺮ ﻣﺘﺰاﻣﻨﺔ، ﺗﻢ إﻧﺸﺎؤﻫﺎ ﺑﻮاﺳﻄﺔ ﻧﻔﺲ اﻟﻔﺮﻳﻖ اﻟﺬي أﻧﺸﺄ HTTP ﺧﺪﻣﺎت
 اﻟﺨﺎص ﺑﻨﺎ ﻹﺿﺎﻓﺔ اﻟﻤﺰﻳﺪ ﻣﻦ API  ﻓي ﺗﻮﺟﻴﻪ Micro ﻳﻤﻜﻨﻚ اﺳﺘﺨﺪام أي ﺑﺮﻧﺎﻣﺞ وﺳﻴﻂ 
اﻟﻤﻴﺰات.
ﻓي ﻣﻜﻮﻧﺎت ﺻﻔﺤﺎت ﻣﺸﺮوﻋﻚ، ﻳﻤﻜﻨﻚ ﺗﻨﻔﻴﺬ اﻟﺘعﻠﻴﻤﺎت اﻟﺒﺮﻣﺠﻴﺔ ﻓﻘﻂ ﻓي ﺟﺎﻧﺐ 
.window  اﻟﺨﺎدوم أو ﻣﻦ ﺟﺎﻧﺐ اﻟﻤﺴﺘﺨﺪم، ﻋﻦ ﻃﺮﻳﻖ اﻟﺘﺤﻘﻖ ﻣﻦ اﻟﺨﺎﺻﻴﺔ
ﻫﺬه اﻟﺨﺎﺻﻴﺔ ﻣﻮﺟﻮدة ﻓﻘﻂ داﺧﻞ اﻟﻤﺘﺼﻔﺢ، ﻟﺬا ﻳﻤﻜﻨﻚ اﻟﺘﺤﻘﻖ ﻣﻨﻬﺎ:
if (typeof window === 'undefined' ) {
} أو ﻣﻦ ﺟﻬﺔClient Side ﺗﺸﻐﻴﻞ اﻟﺘﻄﺒﻴﻖ ﻣﻦ ﺟﻬﺔ اﻟﻤﺴﺘﺨﺪم
(Server Side اﻟﺨﺎدوم
.وﻗﻢ ﺑﺘﻀﻤﻴﻦ اﻟﺘعﻠﻴﻤﺎت اﻟﺒﺮﻣﺠﻴﺔ ﻣﻦ ﺟﺎﻧﺐ اﻟﺨﺎدوم داﺧﻞ ﻫﺬا اﻟﺸﺮط 
وﺑﺎﻟﻤﺜﻞ، ﻳﻤﻜﻨﻚ ﻓﻘﻂ ﺗﻨﻔﻴﺬ ﻣﻦ ﺟﻬﺔ اﻟﻤﺴﺘﺨﺪم ﻓﻘﻂ ﻋﻦ ﻃﺮﻳﻖ اﻟﺘﺤﻘﻖ
if (typeof window !== 'undefined' ) {
}
 ﻫﻨﺎ ﻷﻧﻨﺎ ﻻ ﻧﺴﺘﻄﻴﻊ اﻛﺘﺸﺎف اﻟﻘﻴﻢ ﻏﻴﺮ اﻟﻤﻌﺮﻓﺔ typeof  : ﻧﺴﺘﺨﺪم اﻟﺪاﻟﺔ JS ﺧﺪﻋﺔ
، ﻓﻠﻦ ﻧﺘﻤﻜﻦ ﻣﻦ ﺗﻨﻔﻴﺬه if (window === undefined)  ﺑﻮﺳﺎﺋﻞ أﺧﺮى. إذا ﻛﺎن 
".windo w is not deﬁned " ﻷﻧﻨﺎ ﺳﻨﺤﺼﻞ ﻋﻠى ﺧﻄﺄ وﻗﺖ ﺗﺸﻐﻴﻞ
 أﻳﻀًﺎ اﻟﻜﻮد اﻟﺬي ﻳﺴﺘﺨﺪم ﺗﻠﻚ اﻟﺘﺤﻘﻘﺎت Next.js ﻛﺘﺤﺴﻴﻦ ﻟﻮﻗﺖ ﺑﻨﺎء ﺗﻄﺒﻴﻘﻚ،، ﻳﺰﻳﻞ
ﻣﻦ اﻟﺤﺰم. ﻟﻦ ﺗﺘﻀﻤﻦ اﻟﺤﺰﻣﺔ ﻣﻦ ﺟﺎﻧﺐ اﻟﻤﺴﺘﺨﺪم اﻟﺸﺮط 
.{} if (typeof window === 'undefined')
.ﻳﺘﻢ داﺋﻤًﺎ ﺗﺮك ﻃﺮﻳﻘﺔ ﺗﺼﺪﻳﺮ اﻟﺘﻄﺒﻴﻖ ﻓي آﺧﺮ اﻟﺪرس 
 ﺑﺤﻴﺚ ﻳﻤﻜﻨﻨﺎ Next.js ﻫﻨﺎ أرﻳﺪ أن أﻗﺪﻣﻪ ﻣﺒﻜﺮًا، ﻓﻘﻂ ﻷﻧﻪ ﻣﻦ اﻟﺴﻬﻞ ﺟﺪًا ﺗﺼﺪﻳﺮ ﺗﻄﺒﻴﻖ 
اﻟﻐﻮص ﻓﻴﻪ اﻵن، ﺛﻢ اﻻﻧﺘﻘﺎل إﻟى ﻣﻮاﺿﻴﻊ أﺧﺮى أﻛﺜﺮ ﺗعﻘﻴﺪًا ﻻﺣﻘًﺎ. 
" ﻟﻘﺪ أﺧﺒﺮﺗﻚ ﺑﺈﺿﺎﻓﺔ ﻫﺬه اﻷﺳﻄﺮ اﻟﺜﻼﺛﺔ إﻟى Next.js ﺗﺬﻛﺮ ﻓي ﻓﺼﻞ "ﻛﻴﻔﻴﺔ ﺗﺜﺒﻴﺖ
:package.json  script  اﻟﻘﺴﻢ
"scripts" : {
  "dev": "next",
  "build": "next build" ,
  "start": "next start"
}
 ﻻﺳﺘﺪﻋﺎء اﻷﻣﺮ اﻟﺘﺎﻟي اﻟﻤﺜﺒﺖ ﻣﺤﻠﻴًﺎ ﻓي npm run dev  ﺣﺘى اﻵن، اﺳﺘﺨﺪﻣﻨﺎ
. ﻳﺆدي ذﻟﻚ ﺗﺸﻐﻴﻞ اﻟﺘﻄﺒﻴﻖ ﻓي وﺿﻊ node_modules/next/dist/bin/nextﺗﺼﺪﻳﺮ اﻟﻨﺴﺨﺔ اﻟﻨﻬﺎﺋﻴﺔ
اﻟﺘﻄﻮﻳﺮ، اﻟﺬي ﻳﻮﻓﺮ ﻟﻨﺎ ﻣﻌﺎﻳﻨﺔ اﻟﻤﺼﺪر وإﻋﺎدة اﻟﺘﺤﻤﻴﻞ اﻟﻔﻮري ﻟﻠﺘغﻴﻴﺮات، وﻫﻤﺎ وﻇﻴﻔﺘﺎن 
ﻣﻔﻴﺪﺗﺎن ﺟﺪًا ﻟﺘﺼﺤﻴﺢ اﻷﺧﻄﺎء. 
، ﻳﻤﻜﻨﻚ اﺳﺘﺪﻋﺎء اﻷﻣﺮ ﻧﻔﺴﻪ ﻹﻧﺸﺎء ﻣﻮﻗﻊ وﻳﺐ npm run build  ﻣﻦ ﺧﻼل ﺗﺸﻐﻴﻞ
، ﻳﻤﻜﻦ اﺳﺘﺨﺪام ﻧﻔﺲ npm run start   ﺑعﺪ ذﻟﻚ، ﻣﻦ ﺧﻼل ﺗﺸﻐﻴﻞ build  ﻋﺒﺮ
.start  اﻷﻣﺮ ﻟﺒﺪء ﺗﻄﺒﻴﻖ اﻹﻧﺘﺎج ﻋﺒﺮ
ﻫﺬان اﻷﻣﺮان ﻳﺠﺐ ﻋﻠﻴﻨﺎ ﺗﻨﻔﻴﺬﻫﻤﺎ ﻟﻨﺸﺮ اﻹﺻﺪار اﻟﻨﻬﺎﺋي ﻣﻦ اﻟﻤﻮﻗﻊ ﻣﺤﻠﻴًﺎ ﺑﻨﺠﺎح. ﻳﺘﻢ 
ﺗﺤﺴﻴﻦ اﻹﺻﺪار اﻟﻨﻬﺎﺋي ﺑﺸﻜﻞ ﻛﺒﻴﺮ وﻻ ﻳﺄﺗي ﻣﻊ ﺧﺮاﺋﻂ اﻟﻤﺼﺪر وأﺷﻴﺎء أﺧﺮى ﻣﺜﻞ إﻋﺎدة 
اﻟﺘﺤﻤﻴﻞ اﻟﻔﻮري ﻟﻠﺘغﻴﻴﺮات، واﻟﺘي ﻻ ﺗﻔﻴﺪ ﻣﺴﺘﺨﺪﻣﻴﻨﺎ اﻟﻨﻬﺎﺋﻴﻴﻦ. 
ﻟﺬﻟﻚ، دﻋﻮﻧﺎ ﻧﺼﺪّر اﻟﻨﺴﺨﺔ اﻟﻨﻬﺎﺋﻴﺔ ﻣﻦ ﺗﻄﺒﻴﻘﻨﺎ: 
npm run build
 ﻳﺘﻢ ﻋﺮﺿﻬﺎ اﻵن ﺑﺘﻨﺴﻴﻖ blog/  و/ﻳﺨﺒﺮﻧﺎ ﻧﺎﺗﺞ ﻫﺬا اﻷﻣﺮ أن ﻣﺴﺎرات ﻣﻌﻴﻨﺔ ) 
 ﺑﻮاﺳﻄﺔ اﻟﻮاﺟﻬﺔ اﻟﺨﻠﻔﻴﺔ blog/[id] /  ﺛﺎﺑﺖ/ﺳﺎﻛﻦ، وﺳﻴﺘﻢ ﺗﻘﺪﻳﻢ HTML
.Node.js
:npm run start  ﺛﻢ ﻳﻤﻜﻨﻚ ﺗﺸﻐﻴﻠﻪ
npm run start
http://localhost:3000  :ﻳﻤﻜﻨﻨﺎ اﻵن زﻳﺎرة اﻟﻨﺴﺨﺔ اﻟﻨﻬﺎﺋﻴﺔ 
 ﻣﺤﻠﻴًﺎ. Next.js ﻓي اﻟﻔﺼﻞ اﻟﺴﺎﺑﻖ، ﻧﺸﺮﻧﺎ ﺗﻄﺒﻴﻖ 
ﻛﻴﻒ ﻧﻨﺸﺮه ﻋﻠى ﺧﺎدم وﻳﺐ ﺣﻘﻴﻘي ﺣﺘى ﻳﺘﻤﻜﻦ اﻵﺧﺮون ﻣﻦ اﻟﻮﺻﻮل إﻟﻴﻪ؟ 
 اﻟﺘي أﻧﺸﺄت Vercel  ﻫي ﻣﻦ ﺧﻼل ﻣﻨﺼﺔ Next إﺣﺪى أﺳﻬﻞ اﻟﻄﺮق ﻟﻨﺸﺮ ﺗﻄﺒﻴﻘﺎت 
 وﻣﻮاﻗﻊ اﻟﻮﻳﺐ اﻟﺜﺎﺑﺘﺔ Node.js  . ﻳﻤﻜﻨﻚ اﺳﺘﺨﺪاﻣﻪ اﻵن ﻟﻨﺸﺮ ﺗﻄﺒﻴﻘﺎت Next.js ﻣﺸﺮوع
وﻣﺎ إﻟى ذﻟﻚ.
اﻵن، أﺻﺒﺤﺖ ﺧﻄﻮات اﻟﻨﺸﺮ واﻟﺘﻮزﻳﻊ ﻟﻠﺘﻄﺒﻴﻖ ﺑﺴﻴﻄﺔ ﺟﺪًا وﺳﺮﻳعﺔ ﻟﻠﻐﺎﻳﺔ. ﺑﺎﻹﺿﺎﻓﺔ 
 وﻟﻐﺎت أﺧﺮى. Python   وPHP  وGo ، ﻓﻬي ﺗﺪﻋﻢ أﻳﻀًﺎ ﻧﺸﺮ Node.js  إﻟى ﺗﻄﺒﻴﻘﺎت
ﻳﻤﻜﻨﻚ اﻟﺘﻔﻜﻴﺮ ﻓي اﻷﻣﺮ ﻋﻠى أﻧﻪ "ﺳﺤﺎﺑﺔ" ﻷﻧﻚ ﻻ ﺗعﺮف ﺣﻘًﺎ ﻣﻜﺎن ﻧﺸﺮ اﻟﺘﻄﺒﻴﻖ، ﻟﻜﻨﻚ 
ﺗعﻠﻢ أﻧﻪ ﺳﻴﻜﻮن ﻟﺪﻳﻚ راﺑﻂ ﻳﻤﻜﻨﻚ اﻟﻮﺻﻮل إﻟﻴﻪ ﻣﻦ ﺧﻼﻟﻪ. Vercel رﻓﻊ اﻟﺘﻄﺒﻴﻖ ﻋﲆ
ﻳﻤﻜﻨﻚ اﻵن اﻟﺒﺪء ﻓي اﺳﺘﺨﺪام اﻟﺨﻄﺔ اﻟﻤﺠﺎﻧﻴﺔ، واﻟﺘي ﺗﺘﻀﻤﻦ ﺣﺎﻟﻴًﺎ اﺳﺘﻀﺎﻓﺔ ﺑﺴﻌﺔ 
 ﺟﻴﺠﺎﺑﺎﻳﺖ 100  ﻋﻤﻠﻴﺔ إﻧﺸﺎء ﺷﻬﺮﻳًﺎ، وﻋﺮض اﻟﻨﻄﺎق اﻟﺘﺮددي 1000   ﺟﻴﺠﺎﺑﺎﻳﺖ، و 100
ﺻﻔﺤﺔ. إذا ﻛﻨﺖ ﺑﺤﺎﺟﺔ إﻟى ﻣﺰﻳﺪ ﻣﻦ اﻷﺳﻌﺎر، ﻓﻴﻤﻜﻦ أن ﺗﺴﺎﻋﺪك  CDN  ﺷﻬﺮﻳًﺎ، وﻣﻮﻗﻊ 
 ﻓي ﻓﻬﻢ اﻟﺘﻜﻠﻔﺔ.اﻟﺘﺴﻌﻴﺮ 
 اﻟﺮﺳﻤي: Vercel CLI   ﻫي اﺳﺘﺨﺪام Vercel أﻓﻀﻞ ﻃﺮﻳﻘﺔ ﻟﺒﺪء اﺳﺘﺨﺪام
npm i -g vercel
:ﺛﻢ ﻗﻢ ﺑﺘﺸﻐﻴﻞ
vercel login
 ﻗﺒﻞhttps://ver cel.com/signup  إذا ﻟﻢ ﺗﺴﺠﻞ ﺑعﺪ، ﻳﺮﺟى إﻧﺸﺎء ﺣﺴﺎب ﻋﻠى 
.CLI client  اﻟﻤﺘﺎﺑعﺔ، ﺛﻢ إﺿﺎﻓﺔ اﻟﺒﺮﻳﺪ اﻹﻟﻜﺘﺮوﻧي إﻟى 
Next.js ﺑعﺪ اﻻﻧﺘﻬﺎء ﻣﻦ ذﻟﻚ، ﻗﻢ ﺑﺘﺸﻐﻴﻞ اﻟﻤﺠﻠﺪ ﻟﻤﺸﺮوع
vercel
، وﺳﺘﺤﺼﻞ ﻋﻠى ﻋﻨﻮاﻧﻚ اﻟﻔﺮﻳﺪ Vercel وﺳﻴﺘﻢ ﻧﺸﺮ اﻟﺘﻄﺒﻴﻖ ﻋﻠى اﻟﻔﻮر ﻓي ﺳﺤﺎﺑﺔ
ﻟﻠﺘﻄﺒﻴﻖ.
 ﻃﺮﻳﻘﺔ ﻟﺘﺤﻠﻴﻞ اﻟﺤﺰم اﻟﺘي أﻧﺸﺌﺖ. Next.js ﺗﻮﻓّﺮ
 أﺿﻒ ﻫﺬه اﻷواﻣﺮ اﻟﺜﻼﺛﺔ scripts   ﻟﻠﺘﻄﺒﻴﻖ وﻓي ﻗﺴﻢ package.json  اﻓﺘﺢ ﻣﻠﻒ
اﻟﺠﺪﻳﺪة:
"analyze" : "cross-env ANALYZE=true next build" ,
"analyze:server" : "cross-env BUNDLE_ANALYZE=server next build" ,
"analyze:browser" : "cross-env BUNDLE_ANALYZE=browser next build"(The App Bundles) ﺗﺤﻠﻴﻞ ﺣُﺰم اﻟﺘﻄﺒﻴﻖ
:ﻣﺜﻞ
{
  "name": "firstproject" ,
  "version" : "1.0.0",
  "description" : "",
  "main": "index.js" ,
  "scripts" : {
    "dev": "next",
    "build": "next build" ,
    "start": "next start" ,
    "analyze" : "cross-env ANALYZE=true next build" ,
    "analyze:server" : "cross-env BUNDLE_ANALYZE=server next build" ,
    "analyze:browser" : "cross-env BUNDLE_ANALYZE=browser next build"
  },
  "keywords" : [],
  "author" : "",
  "license" : "ISC",
  "dependencies" : {
    "next": "^9.1.2" ,
    "react": "^16.11.0" ,
    "react-dom" : "^16.11.0"
  }
}
:ﺛﻢ ﻗﻢ ﺑﺘﺜﺒﻴﺖ ﻫﺎﺗﻴﻦ اﻟﺤﺰﻣﺘﻴﻦ 
npm install --dev cross-env @next/bundle-analyzer
: ﻓي اﻟﻤﺠﻠﺪ اﻟﺮﺋﻴﺴي ﻟﻠﻤﺸﺮوع، ﺑﻬﺬا اﻟﻤﺤﺘﻮى next.config.js  ﻗﻢ ﺑﺈﻧﺸﺎء ﻣﻠﻒ
const withBundleAnalyzer = require('@next/bundle-analyzer' )({
  enabled: process .env.ANALYZE === 'true'
})
module.exports = withBundleAnalyzer ({})
:اﻵن ﻗﻢ ﺑﺘﺸﻐﻴﻞ اﻷﻣﺮ
npm run analyze
(client bundles ) ﻳﺠﺐ أن ﻳﻔﺘﺢ ﻫﺬا ﺻﻔﺤﺘﻴﻦ ﻓي اﻟﻤﺘﺼﻔﺢ. واﺣﺪ ﻟﺤﺰم اﻟﻤﺴﺘﺨﺪم 
(:server bundles ) واﻵﺧﺮ ﻟﺤﺰم اﻟﺨﺎدوم 

ﻫﺬا ﻣﻔﻴﺪ ﺑﺸﻜﻞ ﻻ ﻳﺼﺪق. ﻳﻤﻜﻨﻚ ﻓﺤﺺ ﻣﺎ ﻳﺸﻐﻞ أﻛﺒﺮ ﻣﺴﺎﺣﺔ ﻓي اﻟﺤﺰم، وﻳﻤﻜﻨﻚ 
أﻳﻀًﺎ اﺳﺘﺨﺪام اﻟﺸﺮﻳﻂ اﻟﺠﺎﻧﺒﻲ ﻻﺳﺘﺒعﺎد اﻟﺤﺰم اﻟﺼﻐﻴﺮة، ﻣﻦ أﺟﻞ ﺗﺼﻮر أﺳﻬﻞ: 
ﺗعﺪ اﻟﻘﺪرة ﻋﻠى ﺗﺤﻠﻴﻞ اﻟﺤﺰﻣﺔ ﺑﺼﺮﻳًﺎ أﻣﺮًا راﺋﻌًﺎ ﻷﻧﻪ ﻳﻤﻜﻨﻨﺎ ﺗﺤﺴﻴﻦ ﺗﻄﺒﻴﻘﻨﺎ ﺑﺴﻬﻮﻟﺔ 
ﺑﺎﻟﻐﺔ.
 ﻓي ﻣﻨﺸﻮرات ﻣﺪوﻧﺘﻚ: Moment  ﻟﻨﻔﺘﺮض أﻧﻨﺎ ﺑﺤﺎﺟﺔ إﻟى ﺗﺤﻤﻴﻞ ﻣﻜﺘﺒﺔ 
npm install moment( ﻟﻠﻮﺣﺪاتLazy loading) اﻟﺘﺤﻤﻴﻞ اﻟﺒﻄئي
وblog/ :اﻵن دﻋﻨﺎ ﻧﺤﺎﻛي ﺣﻘﻴﻘﺔ أﻧﻨﺎ ﻧﺤﺘﺎﺟﻬﺎ ﻓي ﻣﺴﺎرﻳﻦ ﻣﺨﺘﻠﻔﻴﻦ
.blog/[id] /
:pages/blog/[id].js  ﻧﺴﺘﻮرده ﻓي 
import moment from 'moment'
...
const Post = props => {
  return (
    <div>
      <h1>{props.post.title}</h1>
      <p>Published on {moment().format('dddd D MMMM YYYY' )}</p>
      <p>{props.post.content}</p>
    </div>
  )
}
.ﺳﺄﺿﻴﻒ ﺗﺎرﻳﺦ اﻟﻴﻮم،ﻛﻤﺜﺎل
 ﻓي ﺣﺰم ﺻﻔﺤﺔ اﻟﺘﺪوﻳﻨﺔ، ﻛﻤﺎ ﻳﺘﻀﺢ ﻣﻦ ﺗﺸﻐﻴﻞ Moment.js  ﺳﻴﺘﻢ ﺗﻀﻤﻴﻦ ﻣﻜﺘﺒﺔ
:npm run analytics
ﻻﺣﻆ أن رﻗﻢ ﺣﺠﻢ اﻟﺼﻔﺤﺔ ﺻﺎر أﺣﻤﺮ اﻟﻠﻮن، وﻫﻮ اﻟﻤﺴﺎر اﻟﺬي أﺿﻔﻨﺎ blog/[id] /
!Moment.js  إﻟﻴﻪ
 ﻛﻴﻠﻮ ﺑﺎﻳﺖ، وﺗعﺘﺒﺮ ﺻﻔﺤﺔ ﻛﺒﻴﺮة ﺟﺪًا. وذﻟﻚ ﻷن 350  ﻛﻴﻠﻮ ﺑﺎﻳﺖ إﻟى 1 ~ ﻟﻘﺪ اﻧﺘﻘﻞ ﻣﻦ
 ﻛﻴﻠﻮﺑﺎﻳﺖ. 349  ﻧﻔﺴﻬﺎ ﺗﺒﻠﻎ Moment.js  ﻣﻜﺘﺒﺔ
ﻳﻮﺿﺢ ﺗﺼﻮّر ﺣﺰم اﻟﻌﻤﻴﻞ اﻵن أن اﻟﺤﺰﻣﺔ اﻷﻛﺒﺮ ﻫي اﻟﺼﻔﺤﺔ اﻷوﻟى، واﻟﺘي ﻛﺎﻧﺖ ﻗﻠﻴﻠﺔ 
.Moment.js  ٪ ﻣﻦ ﺣﺠﻤﻬﺎ ﻫﻮ 99 ﺟﺪًا ﻣﻦ ﻗﺒﻞ. و 
.ﻓي ﻛﻞ ﻣﺮة ﻳﺘﻢ ﻓﻴﻬﺎ ﺗﺤﻤﻴﻞ ﺻﻔﺤﺔ اﻟﺘﺪوﻳﻨﺔ، ﺳﻨﺤﻤّﻞ ﻛﻞ ه اﻟﺤﺰﻣﺔ إﻟى اﻟﻤﺴﺘﺨﺪم 
وﻫﺬه ﻟﻴﺴﺖ ﻣﺜﺎﻟﻴﺔ.
 ﻣﻌﺮوﻓﺔ ﺑﺤﺠﻤﻬﺎ Moment.js  ﺗﺘﻤﺜﻞ أﺣﺪ اﻟﺤﻠﻮل ﻓي اﻟﻌﺜﻮر ﻋﻠى ﻣﻜﺘﺒﺔ أﺻﻐﺮ، ﻷن
اﻟﻜﺒﻴﺮ، ﻟﻜﻦ دﻋﻨﺎ ﻧﻔﺘﺮض ﻛﻤﺜﺎل، ﺗﻮﺟّﺐ ﻋﻠﻴﻨﺎ اﺳﺘﺨﺪاﻣﻬﺎ. 
 ﻓي ﺣﺰﻣﺔ واﺣﺪة. Moment  ﺑﺪﻻً ﻣﻦ ذﻟﻚ، ﻣﺎ ﻳﻤﻜﻨﻨﺎ ﻓﻌﻠﻪ ﻫﻮ ﻓﺼﻞ ﻛﻞ ﺷﻔﺮات 
 ﻋﻠى ﻣﺴﺘﻮى اﻟﻤﻜﻮن، ﻧﻘﻮم ﺑﺈﺟﺮاء اﺳﺘﻴﺮاد ﻏﻴﺮ ﻣﺘﺰاﻣﻦ Moment  ﻛﻴﻒ؟ ﺑﺪﻻً ﻣﻦ اﺳﺘﻴﺮاد 
، وﻧﺤﺴﺐ اﻟﻘﻴﻤﺔ ﻹرﺳﺎﻟﻬﺎ إﻟى اﻟﻤﻜﻮن. ﺗﺬﻛﺮ أﻧﻪ ﻻ ﻳﻤﻜﻨﻨﺎ إرﺟﺎع getInitialPr ops داﺧﻞ
، ﻟﺬﻟﻚ ﻧﺤﺴﺐ)( getInitialProps  ﻛﺎﺋﻨﺎت ﻣﻌﻘﺪة داﺧﻞ اﻟﻜﺎﺋﻦ اﻟﺬي ﺗﻢ إرﺟﺎﻋﻪ 
اﻟﺘﺎرﻳﺦ ﺑﺪاﺧﻠﻪ:
import posts from '../../posts.json'
const Post = props => {
  return (
    <div>
      <h1>{props.post.title}</h1>
      <p>Published on {props.date}</p>
      <p>{props.post.content}</p>
    </div>
  )
}
Post.getInitialProps  = async ({ query }) => {
  const moment = (await import('moment' )).default()
  return {
    date: moment.format('dddd D MMMM YYYY' ),
    post: posts[query.id]
  }
}
export default Post
؟ ﻷﻧﻪ ﻣﻦ اﻟﻀﺮوري اﻹﺷﺎرة إﻟى await import  )( ﺑعﺪ default . ﻻﺣﻆ أﻧﻨﺎ اﺳﺘﺨﺪﻣﻨﺎ
(. راﺟﻊdynamic import ) اﻟﺘﺼﺪﻳﺮ اﻻﻓﺘﺮاﺿي ﻓي اﻻﺳﺘﻴﺮاد اﻟﺪﻳﻨﺎﻣﻴﻜي 
https://v8.de v/featur es/dynamic-import
: ﻓﺴﻨﺮىnpm run analyze  إذا ﻗﻤﻨﺎ اﻵن ﺑﺘﺸﻐﻴﻞ
 اﻧﺘﻘﻠﺖ إﻟى ﻣﻠﻒ اﻟﺤﺰﻣﺔ Moment   ﺻﻐﻴﺮة ﻣﺮة أﺧﺮى ﻷن blog/[id] / ﺗعﺪ ﺣﺰﻣﺔ
اﻟﺨﺎص ﺑﻬﺎ وﺗﺤﻤﻴﻠﻬﺎ ﺑﺸﻜﻞ ﻣﻨﻔﺼﻞ ﺑﻮاﺳﻄﺔ اﻟﻤﺘﺼﻔﺢ.
. ﻟﻢ أﺗﺤﺪث ﻋﻦ إدارة ﺟﻠﺴﺎت اﻟﻤﺴﺘﺨﺪم ﻣﻊ ﺗﺴﺠﻴﻞ Next.js ﻫﻨﺎك اﻟﻜﺜﻴﺮ ﻟﺘعﺮﻓﻪ ﻋﻦ 
اﻟﺪﺧﻮل، وﺑﺪون ﺧﺎدم، وإدارة ﻗﻮاﻋﺪ اﻟﺒﻴﺎﻧﺎت، وﻣﺎ إﻟى ذﻟﻚ. 
Next.js اﻟﻐﺮض ﻣﻦ ﻫﺬا اﻟﺪﻟﻴﻞ ﻟﻴﺲ ﺗعﻠﻴﻤﻚ ﻛﻞ ﺷيء، وﻟﻜﻦ ﺗعﺮﻳﻔﻚ ﺑﺠﻤﻴﻊ ﻣﻴﺰات 
ﺧﻄﻮة ﺑﺨﻄﻮة.
 ﻟﻤﻌﺮﻓﺔ ﺟﻴﺪًاNext.js اﻟﻤﺴﺘﻨﺪات اﻟﺮﺳﻤﻴﺔ ﻟـ اﻟﺨﻄﻮة اﻟﺘﺎﻟﻴﺔ اﻟﺘي أوﺻي ﺑﻬﺎ ﻫي ﻗﺮاءة 
اﻟﻤﺰﻳﺪ ﺣﻮل ﺟﻤﻴﻊ اﻟﻤﻴﺰات واﻟﻮﻇﺎﺋﻒ اﻟﺘي ﻟﻢ أﺗﺤﺪث ﻋﻨﻬﺎ، وإﻟﻘﺎء ﻧﻈﺮة ﻋﻠى ﺟﻤﻴﻊ 
، ﺑعﻀﻬﺎ ﻣﺬﻫﻞ ﺟﺪًا. Next.js ﻗﺪﻣﺘﻬﺎ اﻟﻤﻜﻮﻧﺎت اﻹﺿﺎﻓﻴﺔاﻟﻮﻇﺎﺋﻒ اﻹﺿﺎﻓﻴﺔ اﻟﺘي  دﻟﻴﻞ ﻣﺴﺎرك اﻟﻘﺎدم
واﻟﺤﻤﺪ ﻟﻠﻪ ﺑﻬﺬا أﻛﻮن ﻗﺪ اﻧﺘﻬﻴﺖ ﻣﻦ ﺗﺮﺟﻤﺔ اﻟﻜﺘﻴّﺐ اﻟﺼﻐﻴﺮ، أﺳﺄل ﷲ اﻟﺘﻮﻓﻴﻖ واﻟﺴﺪاد 
وﻧﺸﺮ اﻟﺨﻴﺮ ﻟﺨﺪﻣﺔ اﻷﻣﺔ اﻹﺳﻼﻣﻴﺔ واﻟﻌﺮﺑﻴﺔ أﺟﻤﻊ.
دﻣﺘﻢ ﺑﻮد أﺣﺒﺘي. دﻋﻮاﺗﻜﻢ ﻟﻨﺎ ﺑﺎﻟﺘﻮﻓﻴﻖ واﻟﺼﺤﺔ واﻟﺴﻼﻣﺔ واﻟﻌﺎﻓﻴﺔ..Linkedin  وﺗﻮﻳﺘﺮﻻ ﺗﻨﺴى اﻻﺷﺘﺮاك ﻓي اﻟﻘﺎﺋﻤﺔ اﻟﺒﺮﻳﺪﻳﺔ. وﻣﺘﺎﺑعﺘي ﻋﻠى 
ﺷﺎرك ﺑﺎﻟﻘﺎﺋﻤﺔ اﻟﺒﺮﻳﺪﻳﺔ ﻟﺘﺤﺼﻞ ﻋﻠى ﺟﺪﻳﺪ اﻟﺘﺪوﻳﻨﺎت ﻛﻞ ﻳﻮم ﺳﺒﺖ 
اﺷﺘﺮك اﺷﱰك ﺑﺎﻟﻘﺎﺋﻤﺔ اﻟﱪﻳﺪﻳﺔ ﻟﻤﺪوﻧﱵ
أدﺧﻞ ﺑﺮﻳﺪك اﻻﻟﻜﺘﺮوﻧي .. 
ﺷﺎركاﻷﻓﻀﻞ اﻷﺣﺪثاﻷﻗﺪم  ﺗﻌﻠﯿﻘﺎت 4 1 ﺗﺴﺠﯿﻞ اﻟﺪﺧﻮل
ﺳﺠّﻞ اﻟﺪﺧﻮل ﺑﺎﺳﺘﺨﺪام DISQUS  أو ﻗﻢ ﺑﺎﻟﺘﺴﺠﯿﻞ ﻋﻠﻰ
الاﺳﻢ
...اﻧﻀﻢ إﻟﻰ اﻟﻤﻨﺎﻗﺸﺔ
?
 Taha
إﺿﺎﻓﺔ رد
−⚑
 أﻋﻮام٤ ﻣﻨﺬ 
ﻣﺎ ﺷﺎء ﷲ، ﺑﺪاﻳﺔ ﻣﻤﺘﺎزة ﺟﺪاً... ﺑﺎﻟﺘﻮﻓﯿﻖ أﺧﻲ ﻋﺒﺪ اﻟﮫﺎدي 
 
0  
0
Watheq
إﺿﺎﻓﺔ رد
−⚑
 أﻋﻮام٤ ﻣﻨﺬ 
راﺋﻊ وﺑﺎﻟﺘﻮﻓﯿﻖ دوﻣﺎ
 
0  
0
 ﻋﯿﺴﻰ ﻣﺤﻤﺪ ﻋﻠﻲ
إﺿﺎﻓﺔ رد
−⚑
 أﻋﻮام٤ ﻣﻨﺬ 
ﺑﺪاﻳﺔ ﻣﻤﺘﺎزة أﺧﻲ اﻟﻤﺘﺄﻟﻖ ﻋﺒﺪ اﻟﮫﺎدي،
ﺑﺎﻧﺘﻈﺎر ﺑﺎﻗﻲ اﻷﺟﺰاء.
 
0  
0
اﻟﮫﺎدي ﻋﺒﺪ ﷲ
إﺿﺎﻓﺔ رد
−⚑
 أﻋﻮام٤ ﻣﻨﺬ 
ﻣﻘﺎل ﺟﻤﯿﻞ ﺟﺪا، ﺳﺄﺗﺎﺑﻊ ﺟﻤﯿﻊ ﺣﻠﻘﺎت ھﺬه اﻟﺴﻠﺴﻠﺔ :(
 
0  
0
اﺷﺘﺮكاﻟﺨﺼﻮﺻﯿﺔ ﻻ ﺗﺘﺎﺟﺮ ﺑﺒﯿﺎﻧﺎﺗﻲG
3
T
⥅
⥅
⥅
اع
⥅
min r ead 2
ﻟﺘﺄﺳﻴﺲ ﺷﺮﻛﺔ ﻧﺎﺷﺌﺔ ﻧﺎﺟﺤﺔ، ﺗﺤﺘﺎج إﻟى: ﻓﻜﺮة 
راﺋﻌﺔ، وﺳﻮق ﻣﻤﺘﺎز، وﻓﺮﻳﻖ ﻣﺘﻤﻴﺰ، وﻣﻨﺘﺞ ﻣﺘﻔﻮق، …دﻟﻴﻠﻚ اﻟﻌﻤﲇ ﻟﺒﻨﺎء ﴍﻛﺔ ﻧﺎﺷﺌﺔ
Startup ﻧﺎﺟﺤﺔ - ﺗﺮﺟﻤﺔ ﻛﺘﺎب
Playbook
min r ead 2
أﺻﺒﺤﺖ اﻟﻤﺸﺎرﻳﻊ اﻟﻤﻔﺘﻮﺣﺔ اﻟﻤﺼﺪر ﻓي اﻟﻌﻘﺪ
اﻟﻤﺎﺿي أﺳﺎﺳﻴﺔ ﻷﻧﻈﻤﺔ اﻟﺘﻜﻨﻮﻟﻮﺟﻴﺎ. إذ ﺗﺴﺎﻫﻢ ﻓي…ﻛﻴﻒ ﺗﺴﺎﻫﻢ ﰲ اﻟﻤﺸﺎرﻳﻊ ﻣﻔﺘﻮﺣﺔ
اﻟﻤﺼﺪر – اﻟﺪﻟﻴﻞ اﻟﺸﺎﻣﻞ ﻟﻠﻤﺒﺘﺪﺋﲔ
٥٢٠٢  © ﻣﺪوﻧﺔ ﻋﺒﺪاﻟﻬﺎدي اﻟﺄﻧﺪﻟﺴﻲ
ﺟﻤﻴﻊ اﻟﺤﻘﻮق ﻣﺤﻔﻮﻇﺔاﻟﺮﺋﻴﺴﺔﻣﻦ أﻧﺎ؟ دﻋﻨﺎ ﻧﺘﻮاﺻﻞ
